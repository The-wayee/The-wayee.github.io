<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker Quickstart</title>
    <url>/2024/03/01/Docker-Quickstart/</url>
    <content><![CDATA[<h2 id="卸载旧版"><a href="#卸载旧版" class="headerlink" title="卸载旧版"></a>卸载旧版</h2><p>首先如果系统中已经存在旧的Docker，则先卸载：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure></div>

<h2 id="配置Docker的yum库"><a href="#配置Docker的yum库" class="headerlink" title="配置Docker的yum库"></a>配置Docker的yum库</h2><p>首先要安装一个yum工具</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure></div>

<p>安装成功后，执行命令，配置Docker的yum源</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></div>

<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>最后，执行命令，安装Docker</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure></div>

<h2 id="启动和校验"><a href="#启动和校验" class="headerlink" title="启动和校验"></a>启动和校验</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止Docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行docker ps命令，如果不报错，说明安装启动成功</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure></div>

<h2 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h2><h4 id="在首页的产品中，找到阿里云的容器镜像服务"><a href="#在首页的产品中，找到阿里云的容器镜像服务" class="headerlink" title="在首页的产品中，找到阿里云的容器镜像服务"></a>在首页的产品中，找到阿里云的容器镜像服务</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/doc_01.png"
                      alt="Ali_01"
                ></p>
<h4 id="点击后进入控制台"><a href="#点击后进入控制台" class="headerlink" title="点击后进入控制台"></a>点击后进入控制台</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/doc_02.png"
                      alt="Ali_02"
                ></p>
<h4 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h4><p>找到镜像加速器<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/doc_03.png"
                      alt="Ali_03"
                ><br>页面向下滚动，即可找到配置的文档说明：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/doc_04.png"
                      alt="Ali_04"
                ></p>
<h2 id="六-部署Mysql"><a href="#六-部署Mysql" class="headerlink" title="六.部署Mysql"></a>六.部署Mysql</h2><p><em><strong>建议使用root权限</strong></em></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure></div>

<p>Docker会根据命令中的镜像名称自动搜索并下载镜像, 官方网址为hub.docker.com</p>
<a class="button  center large" href='https://hub.docker.com' title='docker hub'><i class='fa-solid fa-play-circle'></i> docker hub</a>

<p>具体流程图如下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/doc_05.png"
                      alt="flow_img"
                ></p>
<h4 id="命令解读"><a href="#命令解读" class="headerlink" title="命令解读"></a>命令解读</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure></div>

<ul>
<li>docker run -d: 创建并运行一个容器，-d 则是让容器以后台进程运行</li>
<li>–name mysql  : 给容器起个名字叫mysql，你可以叫别的</li>
<li>-p 3306:3306 : 设置端口映射。<ul>
<li>容器是隔离环境，外界不可访问。但是可以将宿主机端口映射容器内到端口，当访问宿主机指定端口时，就是在访问容器内的端口了。</li>
<li>容器内端口往往是由容器内的进程决定，例如MySQL进程默认端口是3306，因此容器内端口一定是3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</li>
<li>格式： -p 宿主机端口:容器内端口，示例中就是将宿主机的3306映射到容器内的3306端口</li>
</ul>
</li>
<li>-e TZ&#x3D;Asia&#x2F;Shanghai : 配置容器内进程运行时的一些参数<ul>
<li>格式：-e KEY&#x3D;VALUE，KEY和VALUE都由容器内进程决定</li>
<li>案例中，TZ&#x3D;Asia&#x2F;Shanghai是设置时区；MYSQL_ROOT_PASSWORD&#x3D;root是设置MySQL默认密码</li>
</ul>
</li>
<li>mysql : 设置镜像名称，Docker会根据这个名字搜索并下载镜像<ul>
<li>格式：REPOSITORY:TAG，例如mysql:8.0，其中REPOSITORY可以理解为镜像名，TAG是版本号</li>
<li>在未指定TAG的情况下，默认是最新版本，也就是mysql:latest</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis缓存</title>
    <url>/2024/02/11/Redis%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h2 id="缓存（cache）"><a href="#缓存（cache）" class="headerlink" title="缓存（cache）"></a>缓存（cache）</h2><p>缓存(Cache), 就是数据交换的缓冲区,俗称的缓存就是缓冲区内的数据,一般从数据库中获取,存储于<em>本地代码</em>。</p>
<h2 id="为什么要使用缓存"><a href="#为什么要使用缓存" class="headerlink" title="为什么要使用缓存"></a>为什么要使用缓存</h2><ul>
<li>缓存数据存储于代码中,而代码运行在内存中,内存的读写性能远高于磁盘,缓存可以大大降低用户访问并发量带来的服务器读写压力；</li>
<li>实际开发过程中,企业的数据量,少则几十万,多则几千万,这么大数据量,如果没有缓存来作为”避震器”,系统是几乎撑不住的,所以企业会大量运用到缓存技术;</li>
<li>但是缓存也会增加代码复杂度和运营的成本</li>
</ul>
<h2 id="缓存中的更新策略"><a href="#缓存中的更新策略" class="headerlink" title="缓存中的更新策略"></a>缓存中的更新策略</h2><ul>
<li>内存淘汰 - Redis 自带的内存淘汰机制</li>
<li>淘汰过期 - 利用 expire 命令给数据设置过期时间</li>
<li>主动更新 - 主动完成数据库与缓存的同时更新</li>
</ul>
<h3 id="经常使用的更新策略（Cache-Aside）中的三大问题"><a href="#经常使用的更新策略（Cache-Aside）中的三大问题" class="headerlink" title="经常使用的更新策略（Cache Aside）中的三大问题"></a>经常使用的更新策略（Cache Aside）中的三大问题</h3><ul>
<li>更新缓存还是删除缓存？<ol>
<li>更新缓存会产生无效更新，并且存在较大的线程安全问题</li>
<li>删除缓存本质是延迟更新，没有无效更新，线程安全问题相对较低<br><strong>总结：选择删除缓存</strong></li>
</ol>
</li>
<li>先操作数据库还是缓存？<ol>
<li>先更新数据，再删除缓存 - 在满足原子性的情况下，安全问题概率较低</li>
<li>先删除缓存，再更新数据库 - 安全问题概率较高<br><strong>总结：先更新数据，再删除缓存</strong></li>
</ol>
</li>
<li>如何确保数据库与缓存操作原子性？<ol>
<li>单体系统 - 利用事务机制</li>
<li>分布式系统 - 利用分布式事务机制</li>
</ol>
</li>
</ul>
<h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><ul>
<li>产生原因：在同一时间大量的缓存 key 同时失效或者 Redis 服务器宕机，导致大量的请求到达数据库，带来巨大的压力</li>
<li>解决方案：<ol>
<li>给不同的 key 的 TTL 添加随机值</li>
<li>利用 Redis 集群提高服务的可用性</li>
<li>给缓存业务添加降级限流策略</li>
<li>给业务添加多级缓存</li>
</ol>
</li>
</ul>
<h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><ul>
<li>产生原因：客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库</li>
<li>解决方案：<ol>
<li>缓存空对象 - 对于不存在的数据也在 Redis 建立缓存，值为空，并设置一个较短的 TTL 时间<br>优点：实现简单，维护方便<br>缺点：额外的内存消耗，短期的数据不一致问题</li>
<li>布隆过滤 - 利用布隆过滤算法，在请求进入 Redis 之前先判断是否存在，如果不存在则直接拒绝请求<br>优点：内存占用少<br>缺点：实现复杂，存在误判的可能性</li>
<li>其他：做好数据的基础格式校验，加强用户权限校验，做好热点参数的限流</li>
</ol>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallBack, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">    <span class="comment">//1.从redis查询店铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">//2.判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">        <span class="comment">//3.存在，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断命中的是否为空值</span></span><br><span class="line">    <span class="keyword">if</span>(json != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.不存在，根据id查找数据库</span></span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallBack.apply(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.如果数据库不存在，给这个数据设为空值，添加短暂的TTL</span></span><br><span class="line">    <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//将空值写入redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//返回错误</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.存在，写入redis</span></span><br><span class="line">    <span class="built_in">this</span>.set(key, r, time, unit);</span><br><span class="line">    <span class="comment">//7.返回</span></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="缓存击穿（热点-key）"><a href="#缓存击穿（热点-key）" class="headerlink" title="缓存击穿（热点 key）"></a>缓存击穿（热点 key）</h1><ul>
<li><p>产生原因：</p>
<ol>
<li>热点 Key 在某一时段被高并发访问</li>
<li>缓存重建耗时较长<br><em>热点 key 突然过期，因为重建耗时长，在这段时间内大量请求落到数据库，带来巨大冲击</em></li>
</ol>
</li>
<li><p>解决方案</p>
<ol>
<li>互斥锁 - 给缓存重建过程加锁，确保重建过程只有一个线程执行，其它线程等待<br>优点：实现简单，没有额外内存消耗，一致性好<br>缺点：等待导致性能下降，有死锁风险</li>
</ol>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//释放锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//互斥锁解决缓存击穿</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    <span class="comment">//1.从redis查询店铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">//2.判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="comment">//3.存在，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断命中的是否是空值</span></span><br><span class="line">    <span class="keyword">if</span>(shopJson != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.实现缓存重建</span></span><br><span class="line">    <span class="comment">//4.1获取互斥锁</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY;</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">//4.2判断是否获取成功</span></span><br><span class="line">        <span class="keyword">while</span>(!isLock) &#123;</span><br><span class="line">            <span class="comment">//4.3失败，休眠并且重试</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.4成功，根据id查找数据库</span></span><br><span class="line">        <span class="comment">//DoubleCheck</span></span><br><span class="line">            <span class="comment">//1.从redis查询店铺缓存</span></span><br><span class="line">            shopJson = stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">            <span class="comment">//2.判断是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">                <span class="comment">//3.存在，直接返回</span></span><br><span class="line">                <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//DoubleCheck结束</span></span><br><span class="line"></span><br><span class="line">        shop = getById(id);</span><br><span class="line">        <span class="comment">//模拟重建的延迟</span></span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//将空值写入redis</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.存在，写入redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//7.释放互斥锁</span></span><br><span class="line">        unlock(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.返回</span></span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>逻辑过期:<ul>
<li>热点key缓存永不过期，而是设置一个逻辑过期时间，查询到数据时通过对逻辑过期时间判断，来决定是否需要重建缓存</li>
<li>重建缓存也通过互斥锁保证单线程执行</li>
<li>重建缓存利用独立线程异步执行</li>
<li>其它线程无需等待，直接查询到的旧数据即可<br>优点：线程无需等待，性能较好<br>缺点：短时间不保证一致性，有额外内存消耗，实现复杂</li>
</ul>
</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置线程池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//逻辑过期解决缓存击穿</span></span><br><span class="line"><span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallBack, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">    <span class="comment">//1.从redis查询店铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">//2.判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(json)) &#123;</span><br><span class="line">        <span class="comment">//3.不存在，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.命中，需要先把json反序列化为对象</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean(data, type);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">    <span class="comment">//5.判断是否过期</span></span><br><span class="line">    <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">//5.1未过期， 直接返回店铺信息</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.2已过期，需要缓存重建</span></span><br><span class="line">    <span class="comment">//6.缓存重建</span></span><br><span class="line">    <span class="comment">//6.1获取互斥锁</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">    <span class="comment">//6.2判断是否获取锁成功</span></span><br><span class="line">    <span class="keyword">if</span>(isLock)&#123;</span><br><span class="line">        <span class="comment">// TODO 6.3成功，开启独立线程，实现缓存重建</span></span><br><span class="line">        <span class="comment">//DoubleCheck</span></span><br><span class="line">        <span class="comment">//1.从redis查询店铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson2</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!r.equals(shopJson2)) &#123;</span><br><span class="line">            <span class="comment">//3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(shopJson2, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//DoubleCheck</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启新线程</span></span><br><span class="line">        CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//重建缓存</span></span><br><span class="line">                <span class="comment">//1.查询数据库</span></span><br><span class="line">                <span class="type">R</span> <span class="variable">r1</span> <span class="operator">=</span> dbFallBack.apply(id);</span><br><span class="line">                <span class="comment">//2.写入缓存</span></span><br><span class="line">                <span class="built_in">this</span>.setLogicalExpire(key, r1, time, unit);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">                unlock(lockKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7.返回</span></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud-Eureka篇(注册中心)</title>
    <url>/2024/03/12/Spring-Cloud-Eureka%E7%AF%87/</url>
    <content><![CDATA[<h2 id="Eureka-的作用"><a href="#Eureka-的作用" class="headerlink" title="Eureka 的作用"></a>Eureka 的作用</h2><ul>
<li><p>Eureka 又称服务注册中心，全部服务都需要进行注册才能使用，也是微服务中必不可少的一个组件<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/eureka_01.png"
                      alt="eureka"
                ></p>
</li>
<li><p>服务将信息注册到 eureka-server(Eureka 服务端)，称为服务注册，eureka-server 会保存服务名称(name)和服务的地址(ip)的映射关系</p>
</li>
<li><p>当一个服务需要其他服务时，利用负载均衡选择一个实例地址，并且发起远程调用</p>
</li>
<li><p>服务每隔一段时间(默认 30s)，向 eureka-server 发起请求，报告自己的状态，称为心跳；当超过一定时间没有发送心跳时，eureka-server 会认为微服务实例故障，将该实例从服务列表中剔除；拉取服务时，就能将故障实例排除了</p>
</li>
</ul>
<h2 id="搭建Eureka-Server"><a href="#搭建Eureka-Server" class="headerlink" title="搭建Eureka-Server"></a>搭建Eureka-Server</h2><ol>
<li><em>引入SpringCloud为eureka提供的starter依赖：</em><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li><em>给eureka-server服务编写一个启动类，一定要添加一个@EnableEurekaServer注解，开启eureka的注册中心功能：</em><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.eureka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li><em>编写一个application.yml文件，内容如下：</em><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span> <span class="comment">#端口自己设置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure></div></li>
<li><em>启动微服务，然后在浏览器访问：<a class="link"   href="http://127.0.0.1:10086/" >http://127.0.0.1:10086 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></li>
</ol>
<h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><p>案例：将user-service注册到eureka-server中去。</p>
<ol>
<li><em>在user-service的pom文件中，引入下面的eureka-client依赖：</em><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li><em>在user-service中，修改application.yml文件，添加服务名称、eureka地址：</em><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/eureka_02.png"
                      alt="注册"
                ></li>
</ol>
<h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><p>案例：将order-service的逻辑修改：向eureka-server拉取user-service的信息，实现服务发现。</p>
<ol>
<li><em>在order-service的pom文件中，引入下面的eureka-client依赖：</em><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li><em>在order-service中，修改application.yml文件，添加服务名称、eureka地址：</em><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure></div></li>
<li><em>服务拉取和负载均衡（在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解：）</em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/eureka_03.png"
                      alt="拉取"
                ></li>
<li><em>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法。修改访问的url路径，用服务名代替ip、端口：</em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/eureka_04.png"
                      alt="请求"
                ><br>spring会自动帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，而后完成负载均衡。</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>短链通平台(项目)</title>
    <url>/2024/03/28/Saas%E7%9F%AD%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><a class="button  center large" href='http://47.101.133.243/' title='短链通在线地址'><i class='fa-solid fa-play-circle'></i> 短链通在线地址</a>

<ul>
<li>短链通平台，用户将一个原始链接输入，平台通过特定算法返回一个特定的短链接，这个短链接唯一指定原始链接。原始链接可能非常长，而返回的短链接可能只有几个字符，在分享的时候可以更加方便。同时其他人访问这个短链接的时候，平台会记录访客信息，实现监控短链接数据。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/saas_flow.png"
                      alt="项目流程"
                ><br><strong>具体流程就是</strong></p>
<ol>
<li>生成唯一标识符：当用户输入或提交一个长 URL 时，短链接服务会生成一个唯一的标识符或者短码。</li>
<li>将标识符与长 URL 关联：短链接服务将这个唯一标识符与用户提供的长 URL 关联起来，并将其保存在数据库或者其他持久化存储中。</li>
<li>创建短链接：将生成的唯一标识符加上短链接服务的域名（例如：<code>http://nurl.ink/</code>）作为前缀，构成一个短链接。</li>
<li>重定向：当用户访问该短链接时，短链接服务接收到请求后会根据唯一标识符查找关联的长 URL，然后将用户重定向到这个长 URL。</li>
<li>跟踪统计：一些短链接服务还会提供访问统计和分析功能，记录访问量、来源、地理位置等信息。</li>
</ol>
<h3 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/saas_structure.png"
                      alt="项目架构"
                ></p>
<h3 id="项目质量"><a href="#项目质量" class="headerlink" title="项目质量"></a>项目质量</h3><p>该项目采用SaaS方式(Software As A Service),代表<code>软件即服务</code>, 用户无需自己部署，直接采用互联网线上访问模式，更加简洁方便上手。<br>线上模式同时也带来了<code>高并发</code>，<code>高存储</code>, <code>数据隔离</code>, <code>数据安全</code>，<code>数据增长</code>等问题。该项目通过使用缓存、消息中间件，登录验证和分库分表等手段解决问题</p>
<h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><h3 id="短链接生成规则"><a href="#短链接生成规则" class="headerlink" title="短链接生成规则"></a>短链接生成规则</h3><p>使用MurmurHash算法，MurmurHash 是一种非加密型哈希函数，适用于一般的哈希检索操作。由Austin Appleby在2008年发明，并出现了多个变种，都已经发布到了公有领域(public domain)。与其它流行的哈希函数相比，对于规律性较强的key，MurmurHash的随机分布特征表现更良好、碰撞更低，且计算速度更快。<br>将原始链接加上一个随机UUID，通过MurmurHash算法得出来所需的短链接。</p>
<h3 id="如何判断短链接是否重复"><a href="#如何判断短链接是否重复" class="headerlink" title="如何判断短链接是否重复"></a>如何判断短链接是否重复</h3><p>通过布隆过滤器，将已经创建的短链接放入布隆过滤器。就算布隆过滤器误判了，数据库也有唯一索引兜底</p>
<h3 id="短链接更新先更后删"><a href="#短链接更新先更后删" class="headerlink" title="短链接更新先更后删"></a>短链接更新先更后删</h3><p>在更新短链接信息的时候，采用先更新数据库，再删除缓存操作。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!Objects.equals(hasShortLinkDO.getValidDateType(), requestParam.getValidDateType())</span><br><span class="line">        || !Objects.equals(hasShortLinkDO.getValidDate(), requestParam.getValidDate())) &#123;</span><br><span class="line">    stringRedisTemplate.delete(String.format(GOTO_SHORT_LINK_KEY, requestParam.getFullShortUrl()));</span><br><span class="line">    <span class="keyword">if</span> (hasShortLinkDO.getValidDate() != <span class="literal">null</span> &amp;&amp; hasShortLinkDO.getValidDate().before(<span class="keyword">new</span> <span class="title class_">Date</span>())) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(requestParam.getValidDateType(), VailDateTypeEnum.PERMANENT.getType()) || requestParam.getValidDate().after(<span class="keyword">new</span> <span class="title class_">Date</span>())) &#123;</span><br><span class="line">            stringRedisTemplate.delete(String.format(GOTO_IS_NULL_SHORT_LINK_KEY, requestParam.getFullShortUrl()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="短链接跳转短链接"><a href="#短链接跳转短链接" class="headerlink" title="短链接跳转短链接"></a>短链接跳转短链接</h3><p>如果说缓存不存在，那么就通过布隆过滤器进行初步筛选，然后判断是否存在缓存空值，如果存在直接返回失败。如果不存在缓存空值，使用锁机制避免多个相同请求同时访问数据库。最后，如果请求数据库为空，那么将为空的 Key 进行空对象值缓存。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/saas_07.png"
                      alt="缓存组合方案"
                ></p>
<h2 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h2><h3 id="全局异常拦截器"><a href="#全局异常拦截器" class="headerlink" title="全局异常拦截器"></a>全局异常拦截器</h3><p>统一捕获异常，可以自定义异常并进行细分<br><a class="link"   href="https://blog.csdn.net/qing2019/article/details/128418437" >全局异常拦截器原理及使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollectionUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.nageoffer.shortlink.admin.common.convention.errorcode.BaseErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.nageoffer.shortlink.admin.common.convention.exception.AbstractException;</span><br><span class="line"><span class="keyword">import</span> com.nageoffer.shortlink.admin.common.convention.result.Result;</span><br><span class="line"><span class="keyword">import</span> com.nageoffer.shortlink.admin.common.convention.result.Results;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截参数验证异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">validExceptionHandler</span><span class="params">(HttpServletRequest request, MethodArgumentNotValidException ex)</span> &#123;</span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> ex.getBindingResult();</span><br><span class="line">        <span class="type">FieldError</span> <span class="variable">firstFieldError</span> <span class="operator">=</span> CollectionUtil.getFirst(bindingResult.getFieldErrors());</span><br><span class="line">        <span class="type">String</span> <span class="variable">exceptionStr</span> <span class="operator">=</span> Optional.ofNullable(firstFieldError)</span><br><span class="line">                .map(FieldError::getDefaultMessage)</span><br><span class="line">                .orElse(StrUtil.EMPTY);</span><br><span class="line">        log.error(<span class="string">&quot;[&#123;&#125;] &#123;&#125; [ex] &#123;&#125;&quot;</span>, request.getMethod(), getUrl(request), exceptionStr);</span><br><span class="line">        <span class="keyword">return</span> Results.failure(BaseErrorCode.CLIENT_ERROR.code(), exceptionStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截应用内抛出的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = &#123;AbstractException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">abstractException</span><span class="params">(HttpServletRequest request, AbstractException ex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ex.getCause() != <span class="literal">null</span>) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;[&#123;&#125;] &#123;&#125; [ex] &#123;&#125;&quot;</span>, request.getMethod(), request.getRequestURL().toString(), ex.toString(), ex.getCause());</span><br><span class="line">            <span class="keyword">return</span> Results.failure(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        log.error(<span class="string">&quot;[&#123;&#125;] &#123;&#125; [ex] &#123;&#125;&quot;</span>, request.getMethod(), request.getRequestURL().toString(), ex.toString());</span><br><span class="line">        <span class="keyword">return</span> Results.failure(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截未捕获异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Throwable.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">defaultErrorHandler</span><span class="params">(HttpServletRequest request, Throwable throwable)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;[&#123;&#125;] &#123;&#125; &quot;</span>, request.getMethod(), getUrl(request), throwable);</span><br><span class="line">        <span class="keyword">return</span> Results.failure();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getUrl</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(request.getQueryString())) &#123;</span><br><span class="line">            <span class="keyword">return</span> request.getRequestURL().toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> request.getRequestURL().toString() + <span class="string">&quot;?&quot;</span> + request.getQueryString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="用户敏感信息脱敏（手机号）"><a href="#用户敏感信息脱敏（手机号）" class="headerlink" title="用户敏感信息脱敏（手机号）"></a>用户敏感信息脱敏（手机号）</h3><ul>
<li>创建一个手机序列化器</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手机号脱敏反序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneDesensitizationSerializer</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(String phone, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">phoneDesensitization</span> <span class="operator">=</span> DesensitizedUtil.mobilePhone(phone);</span><br><span class="line">        jsonGenerator.writeString(phoneDesensitization);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>在敏感字段上加自定义序列化器</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRespDTO</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 真实姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String realName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonSerialize(using = PhoneDesensitizationSerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><h4 id="使用布隆过滤器"><a href="#使用布隆过滤器" class="headerlink" title="使用布隆过滤器"></a>使用布隆过滤器</h4><ul>
<li>为了防止缓存击穿直接打到数据库，可以采用布隆过滤器</li>
</ul>
<h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h5 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h5><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure></div>

<h5 id="创建布隆过滤器实体"><a href="#创建布隆过滤器实体" class="headerlink" title="创建布隆过滤器实体"></a>创建布隆过滤器实体</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RBloomFilterConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 防止用户注册查询数据库的布隆过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RBloomFilter&lt;String&gt; <span class="title function_">userRegisterCachePenetrationBloomFilter</span><span class="params">(RedissonClient redissonClient)</span> &#123;</span><br><span class="line">        RBloomFilter&lt;String&gt; bloomFilter = redissonClient.getBloomFilter(<span class="string">&quot;userRegisterCachePenetrationBloomFilter&quot;</span>);</span><br><span class="line">        bloomFilter.tryInit(<span class="number">100000000</span>, <span class="number">0.001</span>); <span class="comment">//布隆过滤器中的大小， 误判率</span></span><br><span class="line">        <span class="keyword">return</span> bloomFilter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注入</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RBloomFilter&lt;String&gt; userRegisterCachePenetrationBloomFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">userRegisterCachePenetrationBloomFilter.add(requestParam.getUsername());</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><h5 id="如何防止用户名重复？"><a href="#如何防止用户名重复？" class="headerlink" title="如何防止用户名重复？"></a>如何防止用户名重复？</h5><ul>
<li>通过布隆过滤器把所有用户名进行加载。这样该功能就能完全隔离数据库。<br>数据库层面添加唯一索引。</li>
</ul>
<h5 id="如何防止恶意请求毫秒级触发大量请求去一个未注册的用户名？"><a href="#如何防止恶意请求毫秒级触发大量请求去一个未注册的用户名？" class="headerlink" title="如何防止恶意请求毫秒级触发大量请求去一个未注册的用户名？"></a>如何防止恶意请求毫秒级触发大量请求去一个未注册的用户名？</h5><p>因为用户名没注册，所以布隆过滤器不存在，代表着可以触发注册流程插入数据库。但是如果恶意请求短时间海量请求，这些请求都会落到数据库，造成数据库访问压力。这里通过分布式锁，锁定用户名进行串行执行，防止恶意请求利用未注册用户名将请求打到数据库。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(UserRegisterReqDTO requestParam)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashUsername(requestParam.getUsername())) &#123;</span><br><span class="line">        <span class="comment">//存在</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClientException</span>(USER_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(LOCK_USER_REGISTER_KEY + requestParam.getUsername());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lock.tryLock()) &#123;</span><br><span class="line">            <span class="comment">//获取锁成功</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> baseMapper.insert(BeanUtil.toBean(requestParam, UserDO.class));</span><br><span class="line">            <span class="keyword">if</span> (insert &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClientException</span>(USER_SAVE_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line">            userRegisterCachePenetrationBloomFilter.add(requestParam.getUsername());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClientException</span>(USER_EXIST);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/saas_01.png"
                      alt="锁"
                ></p>
<h3 id="自动填充字段"><a href="#自动填充字段" class="headerlink" title="自动填充字段"></a>自动填充字段</h3><h4 id="Mybatis-Plus自动填充"><a href="#Mybatis-Plus自动填充" class="headerlink" title="Mybatis-Plus自动填充"></a>Mybatis-Plus自动填充</h4><ul>
<li>在例如create_time, update_time等字段中，在插入、更新操作中需要填充该字段，可以利用<a class="link"   href="https://baomidou.com/guides/auto-fill-field/" >MP(mybatis-plus) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中提供的方法<br><strong>1.实现元对象处理接口</strong></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册为Bean对象，交给Spring容器管理</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, Date::<span class="keyword">new</span>, Date.class);</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, Date::<span class="keyword">new</span>, Date.class);</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;delFlag&quot;</span>, () -&gt; <span class="number">0</span>, Integer.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, Date::<span class="keyword">new</span>, Date.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="2-注解填充字段"><a href="#2-注解填充字段" class="headerlink" title="2.注解填充字段"></a>2.注解填充字段</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除标识 0：未删除 1：已删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Integer delFlag;</span><br></pre></td></tr></table></figure></div>

<h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><h4 id="什么是分库分表"><a href="#什么是分库分表" class="headerlink" title="什么是分库分表"></a>什么是分库分表</h4><p>分库和分表有两种模式，垂直和水平<br>分库两种模式：</p>
<ul>
<li><p>垂直分库：电商数据库拆分为用户、订单、商品、交易等数据库。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/saas_02.png"
                      alt="垂直分库"
                ></p>
</li>
<li><p>水平分库：用户数据库，拆分为多个，比如User_DB_0 - x。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/saas_03.png"
                      alt="水平分库"
                ></p>
</li>
</ul>
<p>分表两种模式：</p>
<ul>
<li>垂直分表：将数据库表按照业务维度进行拆分，将不常用的信息放到一个扩展表。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/saas_04.png"
                      alt="垂直分表"
                ></li>
</ul>
<p>水平分表：将用户表水平拆分，展现形式就是 User_Table_0 - x<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/saas_04.png"
                      alt="水平分表"
                ></p>
<h4 id="数据库分库分表框架-ShardingSphere"><a href="#数据库分库分表框架-ShardingSphere" class="headerlink" title="数据库分库分表框架 ShardingSphere"></a>数据库分库分表框架 ShardingSphere</h4><p>分库分表中的分片键（Sharding Key）是一个关键决策，它直接影响了分库分表的性能和可扩展性。以下是一些选择分片键的关键因素：</p>
<ol>
<li>访问频率：选择分片键应考虑数据的访问频率。将经常访问的数据放在同一个分片上，可以提高查询性能和降低跨分片查询的开销。</li>
<li>数据均匀性：分片键应该保证数据的均匀分布在各个分片上，避免出现热点数据集中在某个分片上的情况。</li>
<li>数据不可变：一旦选择了分片键，它应该是不可变的，不能随着业务的变化而频繁修改。<br>用户名和用户ID选哪个作为分片键？<br>● 用户名。用户名可以登录。</li>
</ol>
<h5 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h5 id="定义分片规则"><a href="#定义分片规则" class="headerlink" title="定义分片规则"></a>定义分片规则</h5><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">   <span class="comment"># ShardingSphere 对 Driver 自定义，实现分库分表等隐藏逻辑</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.apache.shardingsphere.driver.ShardingSphereDriver</span></span><br><span class="line">    <span class="comment"># ShardingSphere 配置文件路径</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:shardingsphere:classpath:shardingsphere-config.yaml</span></span><br></pre></td></tr></table></figure></div>

<h5 id="shardingsphere-config-yaml"><a href="#shardingsphere-config-yaml" class="headerlink" title="shardingsphere-config.yaml"></a>shardingsphere-config.yaml</h5><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源集合</span></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/link?useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true&amp;allowMultiQueries=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span></span><br><span class="line">        <span class="comment"># 真实数据节点，比如数据库源以及数据库在数据库中真实存在的</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_0.t_user_$&#123;0..15&#125;</span></span><br><span class="line">        <span class="comment"># 分表策略</span></span><br><span class="line">        <span class="attr">tableStrategy:</span></span><br><span class="line">          <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="comment"># 分片键</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">username</span></span><br><span class="line">            <span class="comment"># 分片算法，对应 rules[0].shardingAlgorithms</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">user_table_hash_mod</span></span><br><span class="line">    <span class="comment"># 分片算法</span></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span></span><br><span class="line">      <span class="comment"># 数据表分片算法</span></span><br><span class="line">      <span class="attr">user_table_hash_mod:</span></span><br><span class="line">        <span class="comment"># 根据分片键 Hash 分片</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">HASH_MOD</span></span><br><span class="line">        <span class="comment"># 分片数量</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">sharding-count:</span> <span class="number">16</span></span><br><span class="line"><span class="comment"># 展现逻辑 SQL &amp; 真实 SQL</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="敏感数据加密"><a href="#敏感数据加密" class="headerlink" title="敏感数据加密"></a>敏感数据加密</h3><p>利用ShardingSphere对字段进行加密，在yaml配置文件中配置</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置数据源，底层被 ShardingSphere 进行了代理</span></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/link?useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true&amp;allowMultiQueries=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="comment"># 数据加密存储规则</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!ENCRYPT</span></span><br><span class="line">    <span class="comment"># 需要加密的表集合</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="comment"># 用户表</span></span><br><span class="line">      <span class="attr">t_user:</span></span><br><span class="line">        <span class="comment"># 用户表中哪些字段需要进行加密</span></span><br><span class="line">        <span class="attr">columns:</span></span><br><span class="line">          <span class="comment"># 手机号字段，逻辑字段，不一定是在数据库中真实存在</span></span><br><span class="line">          <span class="attr">phone:</span></span><br><span class="line">            <span class="comment"># 手机号字段存储的密文字段，这个是数据库中真实存在的字段</span></span><br><span class="line">            <span class="attr">cipherColumn:</span> <span class="string">phone</span></span><br><span class="line">            <span class="comment"># 身份证字段加密算法</span></span><br><span class="line">            <span class="attr">encryptorName:</span> <span class="string">common_encryptor</span></span><br><span class="line">          <span class="attr">mail:</span></span><br><span class="line">            <span class="attr">cipherColumn:</span> <span class="string">mail</span></span><br><span class="line">            <span class="attr">encryptorName:</span> <span class="string">common_encryptor</span></span><br><span class="line">        <span class="comment"># 是否按照密文字段查询</span></span><br><span class="line">        <span class="attr">queryWithCipherColumn:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 加密算法</span></span><br><span class="line">    <span class="attr">encryptors:</span></span><br><span class="line">      <span class="comment"># 自定义加密算法名称</span></span><br><span class="line">      <span class="attr">common_encryptor:</span></span><br><span class="line">        <span class="comment"># 加密算法类型</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">AES</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="comment"># AES 加密密钥</span></span><br><span class="line">          <span class="attr">aes-key-value:</span> <span class="string">d6oadClrrb9A3GWo</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><ul>
<li>根据用户名查询用户信息</li>
<li>根据用户名查询无脱敏用户信息</li>
<li>查询用户名是否存在</li>
<li>注册用户</li>
<li>修改用户</li>
<li>用户登录</li>
<li>检查用户是否登录</li>
<li>用户退出登录</li>
</ul>
<h2 id="短链接分组模块"><a href="#短链接分组模块" class="headerlink" title="短链接分组模块"></a>短链接分组模块</h2><h3 id="拦截器封装上下文"><a href="#拦截器封装上下文" class="headerlink" title="拦截器封装上下文"></a>拦截器封装上下文</h3><ul>
<li>config</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户配置自动装配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户信息传递过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean&lt;UserTransmitFilter&gt; <span class="title function_">globalUserTransmitFilter</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        FilterRegistrationBean&lt;UserTransmitFilter&gt; registration = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> <span class="title class_">UserTransmitFilter</span>(stringRedisTemplate));</span><br><span class="line">        registration.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        registration.setOrder(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>利用ThreadLocal封装的用户上下文</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">UserContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;a href=&quot;https://github.com/alibaba/transmittable-thread-local&quot; /&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserInfoDTO&gt; USER_THREAD_LOCAL = <span class="keyword">new</span> <span class="title class_">TransmittableThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置用户至上下文</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户详情信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(UserInfoDTO user)</span> &#123;</span><br><span class="line">        USER_THREAD_LOCAL.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取上下文中用户 ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户 ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserInfoDTO</span> <span class="variable">userInfoDTO</span> <span class="operator">=</span> USER_THREAD_LOCAL.get();</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(userInfoDTO).map(UserInfoDTO::getUserId).orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取上下文中用户名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserInfoDTO</span> <span class="variable">userInfoDTO</span> <span class="operator">=</span> USER_THREAD_LOCAL.get();</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(userInfoDTO).map(UserInfoDTO::getUsername).orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取上下文中用户真实姓名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户真实姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getRealName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserInfoDTO</span> <span class="variable">userInfoDTO</span> <span class="operator">=</span> USER_THREAD_LOCAL.get();</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(userInfoDTO).map(UserInfoDTO::getRealName).orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理用户上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span> &#123;</span><br><span class="line">        USER_THREAD_LOCAL.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>过滤器</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息传输过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTransmitFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> httpServletRequest.getRequestURI();</span><br><span class="line">        <span class="keyword">if</span> (!Objects.equals(requestURI, <span class="string">&quot;/api/short-link/v1/user/login&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> httpServletRequest.getHeader(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">userInfoJsonStr</span> <span class="operator">=</span> stringRedisTemplate.opsForHash().get(<span class="string">&quot;login_&quot;</span> + username, token);</span><br><span class="line">            <span class="keyword">if</span> (userInfoJsonStr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">UserInfoDTO</span> <span class="variable">userInfoDTO</span> <span class="operator">=</span> JSON.parseObject(userInfoJsonStr.toString(), UserInfoDTO.class);</span><br><span class="line">                UserContext.setUser(userInfoDTO);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            UserContext.removeUser();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>用户实体信息</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户 ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JSONField(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 真实姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String realName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="实现功能-1"><a href="#实现功能-1" class="headerlink" title="实现功能"></a>实现功能</h3><ul>
<li>新增短链接分组</li>
<li>查询短链接分组</li>
<li>修改短链接分组</li>
<li>删除短链接分组</li>
<li>短链接分组排序</li>
</ul>
<h2 id="短链接管理模块"><a href="#短链接管理模块" class="headerlink" title="短链接管理模块"></a>短链接管理模块</h2><p>这部分主要是针对短链接相关功能的开发，在短链接跳转时有两种方式。一种是301跳转，另一种是302跳转。301代表的是永久重定向（Permanently Moved），下一次浏览器将直接跳转链接，不会走我们的业务逻辑。302代表的是临时性跳转（Temporarily Moved），每次跳转都会请求我们的业务，方便实施监控数据，所以一般短链接都使用302跳转。</p>
<h3 id="新增短链接"><a href="#新增短链接" class="headerlink" title="新增短链接"></a>新增短链接</h3><p>在新增短链接的时候，有几个点需要注意。</p>
<p>1 在创建短链接的时候，同时要把fullShortUrl和gid存进goto表中，后续在通过fullShortUrl查找gid，然后在link表中通过gid查找link相关的信息并返回和跳转。<br>2 需要在插入时把fullShortUrl放入布隆过滤器中<br>3 需要把fullShortUrl放入redis中，进行<code>缓存预热</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ShortLinkCreateRespDTO <span class="title function_">createShortLink</span><span class="params">(ShortLinkCreateReqDTO requestParam)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">shortLinkSuffix</span> <span class="operator">=</span> generateSuffix(requestParam);</span><br><span class="line">    <span class="type">String</span> <span class="variable">fullShortUrl</span> <span class="operator">=</span> StrBuilder.create(requestParam.getDomain())</span><br><span class="line">            .append(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">            .append(shortLinkSuffix)</span><br><span class="line">            .toString();</span><br><span class="line">    <span class="type">ShortLinkDO</span> <span class="variable">shortLinkDO</span> <span class="operator">=</span> ShortLinkDO.builder()</span><br><span class="line">            .domain(requestParam.getDomain())</span><br><span class="line">            .originUrl(requestParam.getOriginUrl())</span><br><span class="line">            .gid(requestParam.getGid())</span><br><span class="line">            .createdType(requestParam.getCreatedType())</span><br><span class="line">            .validDateType(requestParam.getValidDateType())</span><br><span class="line">            .validDate(requestParam.getValidDate())</span><br><span class="line">            .describe(requestParam.getDescribe())</span><br><span class="line">            .shortUri(shortLinkSuffix)</span><br><span class="line">            .enableStatus(<span class="number">0</span>)</span><br><span class="line">            .fullShortUrl(fullShortUrl)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="type">ShortLinkGotoDO</span> <span class="variable">linkGotoDO</span> <span class="operator">=</span> ShortLinkGotoDO.builder()</span><br><span class="line">            .fullShortUrl(fullShortUrl)</span><br><span class="line">            .gid(requestParam.getGid())</span><br><span class="line">            .build();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        baseMapper.insert(shortLinkDO);</span><br><span class="line">        <span class="comment">//存入goto表中</span></span><br><span class="line">        shortLinkGotoMapper.insert(linkGotoDO);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (DuplicateKeyException ex) &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;ShortLinkDO&gt; queryWrapper = Wrappers.lambdaQuery(ShortLinkDO.class)</span><br><span class="line">                .eq(ShortLinkDO::getFullShortUrl, fullShortUrl);</span><br><span class="line">        <span class="type">ShortLinkDO</span> <span class="variable">hasShortLinkDO</span> <span class="operator">=</span> baseMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (hasShortLinkDO != <span class="literal">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;短链接：&#123;&#125; 重复入库&quot;</span>, fullShortUrl);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;短链接生成重复&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//缓存预热</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(</span><br><span class="line">            String.format(GOTO_SHORT_LINK_KEY, fullShortUrl),</span><br><span class="line">            requestParam.getOriginUrl(),</span><br><span class="line">            LinkUtil.getLinkCacheValidTime(requestParam.getValidDate()), TimeUnit.MILLISECONDS</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//添加布隆过滤器</span></span><br><span class="line">    shortUriCreateCachePenetrationBloomFilter.add(fullShortUrl);</span><br><span class="line">    <span class="keyword">return</span> ShortLinkCreateRespDTO.builder()</span><br><span class="line">            .fullShortUrl(<span class="string">&quot;http://&quot;</span> + shortLinkDO.getFullShortUrl())</span><br><span class="line">            .originUrl(requestParam.getOriginUrl())</span><br><span class="line">            .gid(requestParam.getGid())</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="更新短链接"><a href="#更新短链接" class="headerlink" title="更新短链接"></a>更新短链接</h3><p>更新短链接需要注意是否改变了原先的gid，如果gid改变了，说明当前短链接被移到了其他分组。由于我们的分表是用gid分的，所以不能直接更新，需要把之前的link信息删除掉再重新插入。如果gid没变，也就是说短链接还在这个分组，可以直接更新</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateShortLink</span><span class="params">(ShortLinkUpdateReqDTO requestParam)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;ShortLinkDO&gt; queryWrapper = Wrappers.lambdaQuery(ShortLinkDO.class)</span><br><span class="line">                .eq(ShortLinkDO::getGid, requestParam.getGid())</span><br><span class="line">                .eq(ShortLinkDO::getFullShortUrl, requestParam.getFullShortUrl())</span><br><span class="line">                .eq(ShortLinkDO::getDelFlag, <span class="number">0</span>)</span><br><span class="line">                .eq(ShortLinkDO::getEnableStatus, <span class="number">0</span>);</span><br><span class="line">        <span class="type">ShortLinkDO</span> <span class="variable">hasShortLinkDO</span> <span class="operator">=</span> baseMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (hasShortLinkDO == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClientException</span>(<span class="string">&quot;短链接记录不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ShortLinkDO</span> <span class="variable">shortLinkDO</span> <span class="operator">=</span> ShortLinkDO.builder()</span><br><span class="line">                .domain(hasShortLinkDO.getDomain())</span><br><span class="line">                .shortUri(hasShortLinkDO.getShortUri())</span><br><span class="line">                .clickNum(hasShortLinkDO.getClickNum())</span><br><span class="line">                .favicon(hasShortLinkDO.getFavicon())</span><br><span class="line">                .createdType(hasShortLinkDO.getCreatedType())</span><br><span class="line">                .gid(requestParam.getGid())</span><br><span class="line">                .originUrl(requestParam.getOriginUrl())</span><br><span class="line">                .describe(requestParam.getDescribe())</span><br><span class="line">                .validDateType(requestParam.getValidDateType())</span><br><span class="line">                .validDate(requestParam.getValidDate())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(hasShortLinkDO.getGid(), requestParam.getGid())) &#123;</span><br><span class="line">            LambdaUpdateWrapper&lt;ShortLinkDO&gt; updateWrapper = Wrappers.lambdaUpdate(ShortLinkDO.class)</span><br><span class="line">                    .eq(ShortLinkDO::getFullShortUrl, requestParam.getFullShortUrl())</span><br><span class="line">                    .eq(ShortLinkDO::getGid, requestParam.getGid())</span><br><span class="line">                    .eq(ShortLinkDO::getDelFlag, <span class="number">0</span>)</span><br><span class="line">                    .eq(ShortLinkDO::getEnableStatus, <span class="number">0</span>)</span><br><span class="line">                    .set(Objects.equals(requestParam.getValidDateType(), VailDateTypeEnum.PERMANENT.getType()), ShortLinkDO::getValidDate, <span class="literal">null</span>);</span><br><span class="line">            baseMapper.update(shortLinkDO, updateWrapper);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LambdaUpdateWrapper&lt;ShortLinkDO&gt; updateWrapper = Wrappers.lambdaUpdate(ShortLinkDO.class)</span><br><span class="line">                    .eq(ShortLinkDO::getFullShortUrl, requestParam.getFullShortUrl())</span><br><span class="line">                    .eq(ShortLinkDO::getGid, hasShortLinkDO.getGid())</span><br><span class="line">                    .eq(ShortLinkDO::getDelFlag, <span class="number">0</span>)</span><br><span class="line">                    .eq(ShortLinkDO::getEnableStatus, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">//先删后插</span></span><br><span class="line">            baseMapper.delete(updateWrapper);</span><br><span class="line">            baseMapper.insert(shortLinkDO);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> IPage&lt;ShortLinkPageRespDTO&gt; <span class="title function_">pageShortLink</span><span class="params">(ShortLinkPageReqDTO requestParam)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;ShortLinkDO&gt; queryWrapper = Wrappers.lambdaQuery(ShortLinkDO.class)</span><br><span class="line">            .eq(ShortLinkDO::getGid, requestParam.getGid())</span><br><span class="line">            .eq(ShortLinkDO::getEnableStatus, <span class="number">0</span>)</span><br><span class="line">            .eq(ShortLinkDO::getDelFlag, <span class="number">0</span>)</span><br><span class="line">            .orderByDesc(ShortLinkDO::getCreateTime);</span><br><span class="line">    IPage&lt;ShortLinkDO&gt; resultPage = baseMapper.selectPage(requestParam, queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> resultPage.convert(each -&gt; &#123;</span><br><span class="line">        <span class="type">ShortLinkPageRespDTO</span> <span class="variable">result</span> <span class="operator">=</span> BeanUtil.toBean(each, ShortLinkPageRespDTO.class);</span><br><span class="line">        result.setDomain(<span class="string">&quot;http://&quot;</span> + result.getDomain());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="查询短链接分组内的数量"><a href="#查询短链接分组内的数量" class="headerlink" title="查询短链接分组内的数量"></a>查询短链接分组内的数量</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;ShortLinkGroupCountQueryRespDTO&gt; <span class="title function_">listGroupShortLinkCount</span><span class="params">(List&lt;String&gt; requestParam)</span> &#123;</span><br><span class="line">    QueryWrapper&lt;ShortLinkDO&gt; queryWrapper = Wrappers.query(<span class="keyword">new</span> <span class="title class_">ShortLinkDO</span>())</span><br><span class="line">            .select(<span class="string">&quot;gid as gid, count(*) as shortLinkCount&quot;</span>)</span><br><span class="line">            .in(<span class="string">&quot;gid&quot;</span>, requestParam)</span><br><span class="line">            .eq(<span class="string">&quot;enable_status&quot;</span>, <span class="number">0</span>)</span><br><span class="line">            .groupBy(<span class="string">&quot;gid&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; shortLinkDOList = baseMapper.selectMaps(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(shortLinkDOList, ShortLinkGroupCountQueryRespDTO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="对短链接进行重定向跳转"><a href="#对短链接进行重定向跳转" class="headerlink" title="对短链接进行重定向跳转"></a>对短链接进行重定向跳转</h3><p>这个算是核心业务了，也需要解决缓存击穿，缓存穿透等问题</p>
<p>在面对缓存击穿，缓存穿透时，采用了组合方案。将缓存控制，添加布隆过滤器，互斥锁组合使用<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/saas_06.png"
                      alt="缓存组合方案"
                ></p>
<p>如果缓存中不存在，则在布隆过滤器查看。如果布隆过滤器误判，再去查看是否之前存为空值了，如果没存就使用互斥锁访问数据库，数据库存在就存入redis，不存在就存空值。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restoreUrl</span><span class="params">(String shortUri, ServletRequest request, ServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">serverName</span> <span class="operator">=</span> request.getServerName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">fullShortUrl</span> <span class="operator">=</span> serverName + <span class="string">&quot;/&quot;</span> + shortUri;</span><br><span class="line">    <span class="comment">//查找缓存中是否存在</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">originalLink</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(String.format(GOTO_SHORT_LINK_KEY, fullShortUrl));</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(originalLink)) &#123;</span><br><span class="line">        <span class="comment">//缓存存在直接重定向跳转</span></span><br><span class="line">        ((HttpServletResponse) response).sendRedirect(originalLink);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//缓存不存在就查看布隆过滤器</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> shortUriCreateCachePenetrationBloomFilter.contains(fullShortUrl);</span><br><span class="line">    <span class="keyword">if</span> (!contains) &#123;</span><br><span class="line">        <span class="comment">//布隆过滤器不存在就说明数据库一定没有，返回404</span></span><br><span class="line">        ((HttpServletResponse) response).sendRedirect(<span class="string">&quot;/page/notfound&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//布隆过滤器有，但是可能误判，所以查看是不是空值，防止缓存穿透</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">gotoIsNullShortLink</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(String.format(GOTO_IS_NULL_SHORT_LINK_KEY, fullShortUrl));</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(gotoIsNullShortLink)) &#123;</span><br><span class="line">        <span class="comment">//如果之前存过空值，返回404</span></span><br><span class="line">        ((HttpServletResponse) response).sendRedirect(<span class="string">&quot;/page/notfound&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面准备查找数据库，获取互斥锁</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(String.format(LOCK_GOTO_SHORT_LINK_KEY, fullShortUrl));</span><br><span class="line">    <span class="comment">//可能有很多线程都获取锁，但是只需要一个线程去查找数据库</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//双重判定，保证只操作一次数据库</span></span><br><span class="line">        originalLink = stringRedisTemplate.opsForValue().get(String.format(GOTO_SHORT_LINK_KEY, fullShortUrl));</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(originalLink)) &#123;</span><br><span class="line">            <span class="comment">//如果之前有线程更新了缓存，那么直接返回跳转</span></span><br><span class="line">            ((HttpServletResponse) response).sendRedirect(originalLink);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//准备操作数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;ShortLinkGotoDO&gt; linkGotoQueryWrapper = Wrappers.lambdaQuery(ShortLinkGotoDO.class)</span><br><span class="line">                .eq(ShortLinkGotoDO::getFullShortUrl, fullShortUrl);</span><br><span class="line">        <span class="type">ShortLinkGotoDO</span> <span class="variable">shortLinkGotoDO</span> <span class="operator">=</span> shortLinkGotoMapper.selectOne(linkGotoQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (shortLinkGotoDO == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//查找数据库没有，存入空值，返回404</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(String.format(GOTO_IS_NULL_SHORT_LINK_KEY, fullShortUrl), <span class="string">&quot;-&quot;</span>, <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">            ((HttpServletResponse) response).sendRedirect(<span class="string">&quot;/page/notfound&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LambdaQueryWrapper&lt;ShortLinkDO&gt; queryWrapper = Wrappers.lambdaQuery(ShortLinkDO.class)</span><br><span class="line">                .eq(ShortLinkDO::getGid, shortLinkGotoDO.getGid())</span><br><span class="line">                .eq(ShortLinkDO::getFullShortUrl, fullShortUrl)</span><br><span class="line">                .eq(ShortLinkDO::getDelFlag, <span class="number">0</span>)</span><br><span class="line">                .eq(ShortLinkDO::getEnableStatus, <span class="number">0</span>);</span><br><span class="line">        <span class="type">ShortLinkDO</span> <span class="variable">shortLinkDO</span> <span class="operator">=</span> baseMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (shortLinkDO == <span class="literal">null</span> || shortLinkDO.getValidDate().before(<span class="keyword">new</span> <span class="title class_">Date</span>())) &#123;</span><br><span class="line">            <span class="comment">//如果数据库有，但是有效期过期了，同样存入空值，返回404</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(String.format(GOTO_IS_NULL_SHORT_LINK_KEY, fullShortUrl), <span class="string">&quot;-&quot;</span>, <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">            ((HttpServletResponse) response).sendRedirect(<span class="string">&quot;/page/notfound&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后就是数据库有，并且有效期没有过期，存入redis，返回跳转</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(</span><br><span class="line">                String.format(GOTO_SHORT_LINK_KEY, fullShortUrl),</span><br><span class="line">                shortLinkDO.getOriginUrl(),</span><br><span class="line">                LinkUtil.getLinkCacheValidTime(shortLinkDO.getValidDate()), TimeUnit.MILLISECONDS</span><br><span class="line">        );</span><br><span class="line">        ((HttpServletResponse) response).sendRedirect(shortLinkDO.getOriginUrl());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//释放锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成shortUri</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">generateSuffix</span><span class="params">(ShortLinkCreateReqDTO requestParam)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">customGenerateCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    String shorUri;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (customGenerateCount &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;短链接频繁生成，请稍后再试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">originUrl</span> <span class="operator">=</span> requestParam.getOriginUrl();</span><br><span class="line">        originUrl += System.currentTimeMillis();</span><br><span class="line">        shorUri = HashUtil.hashToBase62(originUrl);</span><br><span class="line">        <span class="keyword">if</span> (!shortUriCreateCachePenetrationBloomFilter.contains(requestParam.getDomain() + <span class="string">&quot;/&quot;</span> + shorUri)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        customGenerateCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> shorUri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="获取网站图标"><a href="#获取网站图标" class="headerlink" title="获取网站图标"></a>获取网站图标</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getFavicon</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    <span class="type">URL</span> <span class="variable">targetUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">    <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) targetUrl.openConnection();</span><br><span class="line">    connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">    connection.connect();</span><br><span class="line">    <span class="type">int</span> <span class="variable">responseCode</span> <span class="operator">=</span> connection.getResponseCode();</span><br><span class="line">    <span class="keyword">if</span> (HttpURLConnection.HTTP_OK == responseCode) &#123;</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(url).get();</span><br><span class="line">        <span class="type">Element</span> <span class="variable">faviconLink</span> <span class="operator">=</span> document.select(<span class="string">&quot;link[rel~=(?i)^(shortcut )?icon]&quot;</span>).first();</span><br><span class="line">        <span class="keyword">if</span> (faviconLink != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> faviconLink.attr(<span class="string">&quot;abs:href&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="获取网站标题"><a href="#获取网站标题" class="headerlink" title="获取网站标题"></a>获取网站标题</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getTitleByUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    <span class="type">URL</span> <span class="variable">targetUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">    <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) targetUrl.openConnection();</span><br><span class="line">    connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">    connection.connect();</span><br><span class="line">    <span class="type">int</span> <span class="variable">responseCode</span> <span class="operator">=</span> connection.getResponseCode();</span><br><span class="line">    <span class="keyword">if</span> (responseCode == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(url).get();</span><br><span class="line">        <span class="keyword">return</span> document.title();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Error while fetching title.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="短链接不存在重定向"><a href="#短链接不存在重定向" class="headerlink" title="短链接不存在重定向"></a>短链接不存在重定向</h3><h4 id="引入-thymeleaf"><a href="#引入-thymeleaf" class="headerlink" title="引入 thymeleaf"></a>引入 thymeleaf</h4><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">view:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/templates/</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.html</span></span><br></pre></td></tr></table></figure></div>

<h4 id="页面文件"><a href="#页面文件" class="headerlink" title="页面文件"></a>页面文件</h4><p>放在resources&#x2F;templates&#x2F;notfound</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,</span></span></span><br><span class="line"><span class="string"><span class="tag">    maximum-scale=1.0, user-scalable=no, shrink-to-fit=no, viewport-fit=cover&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;#000000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:title&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;#000000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;video&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:width&quot;</span> <span class="attr">content</span>=<span class="string">&quot;750&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:height&quot;</span> <span class="attr">content</span>=<span class="string">&quot;1334&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.pc-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">32vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">3vw</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.pc-container</span> <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* margin-top: 100px; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.pc-container</span> <span class="selector-class">.img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> <span class="selector-class">.img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50vw</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">textarea</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">90vw</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pc-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;img&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">src</span>=<span class="string">&quot;//p3-live.byteimg.com/tos-cn-i-gjr78lqtd0/c03071dcdc52c24e0aab256518e51557.png~tplv-gjr78lqtd0-image.image&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>您访问的页面不存在，请确认链接是否正确<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短链接不存在跳转控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShortLinkNotFoundController</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短链接不存在跳转页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/page/notfound&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">notfound</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;notfound&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="回收站模块"><a href="#回收站模块" class="headerlink" title="回收站模块"></a>回收站模块</h2><p>和windows的回收站一样，将短链接放入回收站后不允许访问，后期可以恢复使用</p>
<h3 id="实现功能-2"><a href="#实现功能-2" class="headerlink" title="实现功能"></a>实现功能</h3><p>包括将短链接移植回收站，分页查询回收站短链接，恢复短链接和删除回收站的短链接。</p>
<h2 id="监控模块"><a href="#监控模块" class="headerlink" title="监控模块"></a>监控模块</h2><h3 id="短链接跳转监控"><a href="#短链接跳转监控" class="headerlink" title="短链接跳转监控"></a>短链接跳转监控</h3><p>使用消息队列。当用户点击短链接之后，监控消息被投递到消息队列中，消费者将自动处理后续逻辑。那么这个时候就要判断消息的幂等性<br>需要判断消息是否消费过，流程是否执行完成。当消息处理中断异常时，需要处理异常逻辑</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(MapRecord&lt;String, String, String&gt; message)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">stream</span> <span class="operator">=</span> message.getStream();</span><br><span class="line">       <span class="type">RecordId</span> <span class="variable">id</span> <span class="operator">=</span> message.getId();</span><br><span class="line">       <span class="comment">//在消息开始消费前，给消息添加一个幂等标识，标识它还未被消费。如果未被消费，返回false</span></span><br><span class="line">       <span class="keyword">if</span> (messageQueueIdempotentHandler.isMessageBeingConsumed(id.toString())) &#123;</span><br><span class="line">           <span class="comment">// 判断当前的这个消息流程是否执行完成</span></span><br><span class="line">           <span class="keyword">if</span> (messageQueueIdempotentHandler.isAccomplish(id.toString())) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;消息未完成流程，需要消息队列重试&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Map&lt;String, String&gt; producerMap = message.getValue();</span><br><span class="line">           <span class="type">ShortLinkStatsRecordDTO</span> <span class="variable">statsRecord</span> <span class="operator">=</span> JSON.parseObject(producerMap.get(<span class="string">&quot;statsRecord&quot;</span>), ShortLinkStatsRecordDTO.class);</span><br><span class="line">           actualSaveShortLinkStats(statsRecord);</span><br><span class="line">           stringRedisTemplate.opsForStream().delete(Objects.requireNonNull(stream), id.getValue());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">           <span class="comment">//异常情况, 删除幂等标识</span></span><br><span class="line">           messageQueueIdempotentHandler.delMessageProcessed(id.toString());</span><br><span class="line">           log.error(<span class="string">&quot;记录短链接监控消费异常&quot;</span>, ex);</span><br><span class="line">           <span class="keyword">throw</span> ex;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//将幂等标识设为已消费</span></span><br><span class="line">       messageQueueIdempotentHandler.setAccomplish(id.toString());</span><br><span class="line">       <span class="comment">//如果服务宕机，这个幂等标识已被设为两分钟自动过期，不用担心后面的线程无法消费</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>跳转监控</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actualSaveShortLinkStats</span><span class="params">(ShortLinkStatsRecordDTO statsRecord)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fullShortUrl</span> <span class="operator">=</span> statsRecord.getFullShortUrl();</span><br><span class="line">        <span class="comment">//在别人访问短链接时进行读锁，当原始链接被修改时不允许访问。</span></span><br><span class="line">        <span class="type">RReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> redissonClient.getReadWriteLock(String.format(LOCK_GID_UPDATE_KEY, fullShortUrl));</span><br><span class="line">        <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> readWriteLock.readLock();</span><br><span class="line">        rLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LambdaQueryWrapper&lt;ShortLinkGotoDO&gt; queryWrapper = Wrappers.lambdaQuery(ShortLinkGotoDO.class)</span><br><span class="line">                    .eq(ShortLinkGotoDO::getFullShortUrl, fullShortUrl);</span><br><span class="line">            <span class="type">ShortLinkGotoDO</span> <span class="variable">shortLinkGotoDO</span> <span class="operator">=</span> shortLinkGotoMapper.selectOne(queryWrapper);</span><br><span class="line">            <span class="type">String</span> <span class="variable">gid</span> <span class="operator">=</span> shortLinkGotoDO.getGid();</span><br><span class="line">            <span class="type">Date</span> <span class="variable">currentDate</span> <span class="operator">=</span> statsRecord.getCurrentDate();</span><br><span class="line">            <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> DateUtil.hour(currentDate, <span class="literal">true</span>);</span><br><span class="line">            <span class="type">Week</span> <span class="variable">week</span> <span class="operator">=</span> DateUtil.dayOfWeekEnum(currentDate);</span><br><span class="line">            <span class="type">int</span> <span class="variable">weekValue</span> <span class="operator">=</span> week.getIso8601Value();</span><br><span class="line">            <span class="type">LinkAccessStatsDO</span> <span class="variable">linkAccessStatsDO</span> <span class="operator">=</span> LinkAccessStatsDO.builder()</span><br><span class="line">                    .pv(<span class="number">1</span>)</span><br><span class="line">                    .uv(statsRecord.getUvFirstFlag() ? <span class="number">1</span> : <span class="number">0</span>)</span><br><span class="line">                    .uip(statsRecord.getUipFirstFlag() ? <span class="number">1</span> : <span class="number">0</span>)</span><br><span class="line">                    .hour(hour)</span><br><span class="line">                    .weekday(weekValue)</span><br><span class="line">                    .fullShortUrl(fullShortUrl)</span><br><span class="line">                    .date(currentDate)</span><br><span class="line">                    .build();</span><br><span class="line">            linkAccessStatsMapper.shortLinkStats(linkAccessStatsDO);</span><br><span class="line">            Map&lt;String, Object&gt; localeParamMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            localeParamMap.put(<span class="string">&quot;key&quot;</span>, statsLocaleAmapKey);</span><br><span class="line">            localeParamMap.put(<span class="string">&quot;ip&quot;</span>, statsRecord.getRemoteAddr());</span><br><span class="line">            <span class="type">String</span> <span class="variable">localeResultStr</span> <span class="operator">=</span> HttpUtil.get(AMAP_REMOTE_URL, localeParamMap);</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">localeResultObj</span> <span class="operator">=</span> JSON.parseObject(localeResultStr);</span><br><span class="line">            <span class="type">String</span> <span class="variable">infoCode</span> <span class="operator">=</span> localeResultObj.getString(<span class="string">&quot;infocode&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">actualProvince</span> <span class="operator">=</span> <span class="string">&quot;未知&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">actualCity</span> <span class="operator">=</span> <span class="string">&quot;未知&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isNotBlank(infoCode) &amp;&amp; StrUtil.equals(infoCode, <span class="string">&quot;10000&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">province</span> <span class="operator">=</span> localeResultObj.getString(<span class="string">&quot;province&quot;</span>);</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">unknownFlag</span> <span class="operator">=</span> StrUtil.equals(province, <span class="string">&quot;[]&quot;</span>);</span><br><span class="line">                <span class="type">LinkLocaleStatsDO</span> <span class="variable">linkLocaleStatsDO</span> <span class="operator">=</span> LinkLocaleStatsDO.builder()</span><br><span class="line">                        .province(actualProvince = unknownFlag ? actualProvince : province)</span><br><span class="line">                        .city(actualCity = unknownFlag ? actualCity : localeResultObj.getString(<span class="string">&quot;city&quot;</span>))</span><br><span class="line">                        .adcode(unknownFlag ? <span class="string">&quot;未知&quot;</span> : localeResultObj.getString(<span class="string">&quot;adcode&quot;</span>))</span><br><span class="line">                        .cnt(<span class="number">1</span>)</span><br><span class="line">                        .fullShortUrl(fullShortUrl)</span><br><span class="line">                        .country(<span class="string">&quot;中国&quot;</span>)</span><br><span class="line">                        .date(currentDate)</span><br><span class="line">                        .build();</span><br><span class="line">                linkLocaleStatsMapper.shortLinkLocaleState(linkLocaleStatsDO);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">LinkOsStatsDO</span> <span class="variable">linkOsStatsDO</span> <span class="operator">=</span> LinkOsStatsDO.builder()</span><br><span class="line">                    .os(statsRecord.getOs())</span><br><span class="line">                    .cnt(<span class="number">1</span>)</span><br><span class="line">                    .fullShortUrl(fullShortUrl)</span><br><span class="line">                    .date(currentDate)</span><br><span class="line">                    .build();</span><br><span class="line">            linkOsStatsMapper.shortLinkOsState(linkOsStatsDO);</span><br><span class="line">            <span class="type">LinkBrowserStatsDO</span> <span class="variable">linkBrowserStatsDO</span> <span class="operator">=</span> LinkBrowserStatsDO.builder()</span><br><span class="line">                    .browser(statsRecord.getBrowser())</span><br><span class="line">                    .cnt(<span class="number">1</span>)</span><br><span class="line">                    .fullShortUrl(fullShortUrl)</span><br><span class="line">                    .date(currentDate)</span><br><span class="line">                    .build();</span><br><span class="line">            linkBrowserStatsMapper.shortLinkBrowserState(linkBrowserStatsDO);</span><br><span class="line">            <span class="type">LinkDeviceStatsDO</span> <span class="variable">linkDeviceStatsDO</span> <span class="operator">=</span> LinkDeviceStatsDO.builder()</span><br><span class="line">                    .device(statsRecord.getDevice())</span><br><span class="line">                    .cnt(<span class="number">1</span>)</span><br><span class="line">                    .fullShortUrl(fullShortUrl)</span><br><span class="line">                    .date(currentDate)</span><br><span class="line">                    .build();</span><br><span class="line">            linkDeviceStatsMapper.shortLinkDeviceState(linkDeviceStatsDO);</span><br><span class="line">            <span class="type">LinkNetworkStatsDO</span> <span class="variable">linkNetworkStatsDO</span> <span class="operator">=</span> LinkNetworkStatsDO.builder()</span><br><span class="line">                    .network(statsRecord.getNetwork())</span><br><span class="line">                    .cnt(<span class="number">1</span>)</span><br><span class="line">                    .fullShortUrl(fullShortUrl)</span><br><span class="line">                    .date(currentDate)</span><br><span class="line">                    .build();</span><br><span class="line">            linkNetworkStatsMapper.shortLinkNetworkState(linkNetworkStatsDO);</span><br><span class="line">            <span class="type">LinkAccessLogsDO</span> <span class="variable">linkAccessLogsDO</span> <span class="operator">=</span> LinkAccessLogsDO.builder()</span><br><span class="line">                    .user(statsRecord.getUv())</span><br><span class="line">                    .ip(statsRecord.getRemoteAddr())</span><br><span class="line">                    .browser(statsRecord.getBrowser())</span><br><span class="line">                    .os(statsRecord.getOs())</span><br><span class="line">                    .network(statsRecord.getNetwork())</span><br><span class="line">                    .device(statsRecord.getDevice())</span><br><span class="line">                    .locale(StrUtil.join(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;中国&quot;</span>, actualProvince, actualCity))</span><br><span class="line">                    .fullShortUrl(fullShortUrl)</span><br><span class="line">                    .build();</span><br><span class="line">            linkAccessLogsMapper.insert(linkAccessLogsDO);</span><br><span class="line">            shortLinkMapper.incrementStats(gid, fullShortUrl, <span class="number">1</span>, statsRecord.getUvFirstFlag() ? <span class="number">1</span> : <span class="number">0</span>, statsRecord.getUipFirstFlag() ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">            <span class="type">LinkStatsTodayDO</span> <span class="variable">linkStatsTodayDO</span> <span class="operator">=</span> LinkStatsTodayDO.builder()</span><br><span class="line">                    .todayPv(<span class="number">1</span>)</span><br><span class="line">                    .todayUv(statsRecord.getUvFirstFlag() ? <span class="number">1</span> : <span class="number">0</span>)</span><br><span class="line">                    .todayUip(statsRecord.getUipFirstFlag() ? <span class="number">1</span> : <span class="number">0</span>)</span><br><span class="line">                    .fullShortUrl(fullShortUrl)</span><br><span class="line">                    .date(currentDate)</span><br><span class="line">                    .build();</span><br><span class="line">            linkStatsTodayMapper.shortLinkTodayState(linkStatsTodayDO);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;短链接访问量统计异常&quot;</span>, ex);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>Saas项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud-Feign篇(远程调用)</title>
    <url>/2024/03/13/Spring-Cloud-Feign%E7%AF%87-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h2 id="认识Feign"><a href="#认识Feign" class="headerlink" title="认识Feign"></a>认识Feign</h2><p>Feign是一个声明式的http客户端，官方地址：<a class="link"   href="https://github.com/OpenFeign/feign" >https://github.com/OpenFeign/feign <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，其作用就是帮助我们优雅的实现http请求的发送</p>
<h2 id="Feign替代RestTemplate"><a href="#Feign替代RestTemplate" class="headerlink" title="Feign替代RestTemplate"></a>Feign替代RestTemplate</h2><p>Fegin的使用步骤如下</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>我们在order-service服务的pom文件中引入feign的依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h3><p>在order-service的启动类添加注解开启Feign的功能：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/feign_01.png"
                      alt="feign"
                ></p>
<h3 id="编写Feign的客户端"><a href="#编写Feign的客户端" class="headerlink" title="编写Feign的客户端"></a>编写Feign的客户端</h3><p>在order-service中新建一个接口，内容如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p>
<ul>
<li>服务名称：userservice</li>
<li>请求方式：GET</li>
<li>请求路径：&#x2F;user&#x2F;{id}</li>
<li>请求参数：Long id</li>
<li>返回值类型：User</li>
</ul>
<p>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>修改order-service中的OrderService类中的queryOrderById方法，使用Feign客户端代替RestTemplate：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/feign_02.png"
                      alt="testFeign"
                ></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用Feign的步骤：</p>
<p>① 引入依赖:spring-cloud-starter-openfeign<br>② 添加@EnableFeignClients注解<br>③ 编写FeignClient接口<br>④ 使用FeignClient中定义的方法代替RestTemplate</p>
<h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>feign.Logger.Level</strong></td>
<td>修改日志级别</td>
<td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td>
</tr>
<tr>
<td>feign.codec.Decoder</td>
<td>响应结果的解析器</td>
<td>http远程调用的结果做解析，例如解析json字符串为java对象</td>
</tr>
<tr>
<td>feign.codec.Encoder</td>
<td>请求参数编码</td>
<td>将请求参数编码，便于通过http请求发送</td>
</tr>
<tr>
<td>feign.Contract</td>
<td>支持的注解格式</td>
<td>默认是SpringMVC的注解</td>
</tr>
<tr>
<td>feign.Retryer</td>
<td>失败重试机制</td>
<td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td>
</tr>
</tbody></table>
<p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p>
<p>下面以日志为例来演示如何自定义配置。</p>
<h3 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h3><p>基于配置文件修改feign的日志级别可以针对单个服务, 也可以针对所有服务</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别 </span></span><br></pre></td></tr></table></figure></div>
<p>而日志的级别分为四种：</p>
<ul>
<li>NONE：不记录任何日志信息，这是默认值。</li>
<li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li>
<li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li>
<li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li>
</ul>
<h3 id="Java代码方式"><a href="#Java代码方式" class="headerlink" title="Java代码方式"></a>Java代码方式</h3><p>也可以基于Java代码来修改日志级别，先声明一个类，然后声明一个Logger.Level的对象：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span>  &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC; <span class="comment">// 日志级别为BASIC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients这个注解中：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration.class)</span> </span><br></pre></td></tr></table></figure></div>

<p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient这个注解中：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration .class)</span> </span><br></pre></td></tr></table></figure></div>
<h2 id="Feign使用优化"><a href="#Feign使用优化" class="headerlink" title="Feign使用优化"></a>Feign使用优化</h2><p>Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：</p>
<p>•URLConnection：默认实现，不支持连接池</p>
<p>•Apache HttpClient ：支持连接池</p>
<p>•OKHttp：支持连接池<br>因此提高Feign的性能主要手段就是使用<strong>连接池</strong>代替默认的URLConnection。</p>
<p>这里我们用Apache的HttpClient来演示。</p>
<ol>
<li>引入依赖<br>在order-service的pom文件中引入Apache的HttpClient依赖：<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>配置连接池<br>在order-service的application.yml中添加配置：<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># default全局的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span> <span class="comment"># 日志级别，BASIC就是基本的请求和响应信息</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对HttpClient的支持</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment"># 最大的连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure></div>
总结，Feign的优化：</li>
</ol>
<p>1.日志级别尽量用basic</p>
<p>2.使用HttpClient或OKHttp代替URLConnection</p>
<p>①  引入feign-httpClient依赖</p>
<p>②  配置文件开启httpClient功能，设置连接池参数</p>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>所谓最近实践，就是使用过程中总结的经验，最好的一种使用方式。</p>
<p>自习观察可以发现，Feign的客户端与服务提供者的controller代码非常相似：</p>
<p>feign客户端：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/feign_03.png"
                      alt="testFeign"
                ><br>UserController：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/feign_04.png"
                      alt="testFeign"
                ><br>有没有一种办法简化这种重复的代码编写呢？</p>
<h3 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h3><p>一样的代码可以通过继承来共享：</p>
<p>1）定义一个API接口，利用定义方法，并基于SpringMVC注解做声明。</p>
<p>2）Feign客户端和Controller都集成改接口<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/feign_05.png"
                      alt="extends"
                ><br>优点：</p>
<ul>
<li>简单</li>
<li>实现了代码共享</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>服务提供方、服务消费方紧耦合</p>
</li>
<li><p>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解</p>
</li>
</ul>
<h3 id="抽取方式"><a href="#抽取方式" class="headerlink" title="抽取方式"></a>抽取方式</h3><p>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用。</p>
<p>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/feign_06.png"
                      alt="extends"
                ></p>
<h3 id="实现基于抽取的最佳实践"><a href="#实现基于抽取的最佳实践" class="headerlink" title="实现基于抽取的最佳实践"></a>实现基于抽取的最佳实践</h3><h4 id="抽取"><a href="#抽取" class="headerlink" title="抽取"></a>抽取</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/feign_07.png"
                      alt="extends"
                ><br>在feign-api中然后引入feign的starter依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>然后，order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/feign_08.png"
                      alt="extends"
                ></p>
<h4 id="在order-service中使用feign-api"><a href="#在order-service中使用feign-api" class="headerlink" title="在order-service中使用feign-api"></a>在order-service中使用feign-api</h4><p>首先，删除order-service中的UserClient、User、DefaultFeignConfiguration等类或接口。</p>
<p>在order-service的pom文件中中引入feign-api的依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h4 id="重启测试"><a href="#重启测试" class="headerlink" title="重启测试"></a>重启测试</h4><p>重启后，发现服务报错了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/feign_08.png"
                      alt="extends"
                ><br>这是因为UserClient现在在org.example.feign.clients包下，</p>
<p>而order-service的@EnableFeignClients注解是在org.example.order包下，不在同一个包，无法扫描到UserClient。</p>
<h4 id="解决扫描包问题"><a href="#解决扫描包问题" class="headerlink" title="解决扫描包问题"></a>解决扫描包问题</h4><p>方式一：<br>指定Feign应该扫描的包：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;org.example.feign.clients&quot;)</span></span><br></pre></td></tr></table></figure></div>
<p>方式二：<br>指定需要加载的Client接口: （推荐）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span></span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Feign</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud-Gateway篇(服务网关)</title>
    <url>/2024/03/13/Spring-Cloud-Gateway%E7%AF%87-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<h2 id="Gateway简介"><a href="#Gateway简介" class="headerlink" title="Gateway简介"></a>Gateway简介</h2><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p>
<h2 id="为什么需要网关"><a href="#为什么需要网关" class="headerlink" title="为什么需要网关"></a>为什么需要网关</h2><p>Gateway网关是我们服务的守门神，所有微服务的统一入口。</p>
<p>网关的<strong>核心功能特性</strong>：</p>
<ul>
<li>请求路由</li>
<li>权限控制</li>
<li>限流</li>
</ul>
<p>架构图：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/gateway_01.png"
                      alt="gateway"
                ></p>
<p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p>
<p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p>
<p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p>
<p>在SpringCloud中网关的实现包括两种：</p>
<ul>
<li>gateway</li>
<li>zuul</li>
</ul>
<p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p>
<h2 id="Gateway快速入门"><a href="#Gateway快速入门" class="headerlink" title="Gateway快速入门"></a>Gateway快速入门</h2><p>下面，我们就演示下网关的基本路由功能。基本步骤如下：</p>
<ol>
<li>创建SpringBoot工程gateway，引入网关依赖</li>
<li>编写启动类</li>
<li>编写基础配置和路由规则</li>
<li>启动网关服务进行测试</li>
</ol>
<h3 id="创建gateway服务，引入依赖"><a href="#创建gateway服务，引入依赖" class="headerlink" title="创建gateway服务，引入依赖"></a>创建gateway服务，引入依赖</h3><p>创建服务：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/gateway_02.png"
                      alt="create"
                ><br>引入依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos服务发现依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="编写启动类"><a href="#编写启动类" class="headerlink" title="编写启动类"></a>编写启动类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="编写基础配置和路由规则"><a href="#编写基础配置和路由规则" class="headerlink" title="编写基础配置和路由规则"></a>编写基础配置和路由规则</h3><p>创建application.yml文件，内容如下：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment"># 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 路由id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br></pre></td></tr></table></figure></div>
<p>我们将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址。</p>
<p>本例中，我们将 <code>/user/**</code>开头的请求，代理到<code>lb://userservice</code>，lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。</p>
<h3 id="重启测试"><a href="#重启测试" class="headerlink" title="重启测试"></a>重启测试</h3><p>重启网关，访问<a class="link"   href="http://localhost:10010/user/1" >http://localhost:10010/user/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>时，符合<code>/user/**</code>规则，请求转发到uri: <a class="link"   href="http://userservice/user/1" >http://userservice/user/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，得到了结果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/gateway_03.png"
                      alt="create"
                ></p>
<h3 id="网关路由的流程图"><a href="#网关路由的流程图" class="headerlink" title="网关路由的流程图"></a>网关路由的流程图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/gateway_04.png"
                      alt="create"
                ><br>总结：</p>
<p>网关搭建步骤：</p>
<ol>
<li><p>创建项目，引入nacos服务发现和gateway依赖</p>
</li>
<li><p>配置application.yml，包括服务基本信息、nacos地址、路由</p>
</li>
</ol>
<p>路由配置包括：</p>
<ol>
<li><p>路由id：路由的唯一标示</p>
</li>
<li><p>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</p>
</li>
<li><p>路由断言（predicates）：判断路由的规则，</p>
</li>
<li><p>路由过滤器（filters）：对请求或响应做处理</p>
</li>
</ol>
<p>下面就是路由断言和路由过滤器的详细知识</p>
<h2 id="断言工厂"><a href="#断言工厂" class="headerlink" title="断言工厂"></a>断言工厂</h2><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p>
<p>例如Path&#x3D;&#x2F;user&#x2F;**是按照路径匹配，这个规则是由</p>
<p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p>
<p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>After</td>
<td>是某个时间点后的请求</td>
<td>-  After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td>
</tr>
<tr>
<td>Before</td>
<td>是某个时间点之前的请求</td>
<td>-  Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td>
</tr>
<tr>
<td>Between</td>
<td>是某两个时间点之前的请求</td>
<td>-  Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver],  2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td>
</tr>
<tr>
<td>Cookie</td>
<td>请求必须包含某些cookie</td>
<td>- Cookie&#x3D;chocolate, ch.p</td>
</tr>
<tr>
<td>Header</td>
<td>请求必须包含某些header</td>
<td>- Header&#x3D;X-Request-Id, \d+</td>
</tr>
<tr>
<td>Host</td>
<td>请求必须是访问某个host（域名）</td>
<td>-  Host&#x3D;<strong>.somehost.org,</strong>.anotherhost.org</td>
</tr>
<tr>
<td>Method</td>
<td>请求方式必须是指定方式</td>
<td>- Method&#x3D;GET,POST</td>
</tr>
<tr>
<td>Path</td>
<td>请求路径必须符合指定规则</td>
<td>- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td>
</tr>
<tr>
<td>Query</td>
<td>请求参数必须包含指定参数</td>
<td>- Query&#x3D;name, Jack或者-  Query&#x3D;name</td>
</tr>
<tr>
<td>RemoteAddr</td>
<td>请求者的ip必须是指定范围</td>
<td>- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td>
</tr>
<tr>
<td>Weight</td>
<td>权重处理</td>
<td></td>
</tr>
<tr>
<td>我们只需要掌握Path这种路由工程就可以了。</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="过滤器种类"><a href="#过滤器种类" class="headerlink" title="过滤器种类"></a>过滤器种类</h3><p>Spring提供了31种不同的路由过滤器工厂。例如：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>AddRequestHeader</td>
<td>给当前请求添加一个请求头</td>
</tr>
<tr>
<td>RemoveRequestHeader</td>
<td>移除请求中的一个请求头</td>
</tr>
<tr>
<td>AddResponseHeader</td>
<td>给响应结果中添加一个响应头</td>
</tr>
<tr>
<td>RemoveResponseHeader</td>
<td>从响应结果中移除有一个响应头</td>
</tr>
<tr>
<td>RequestRateLimiter</td>
<td>限制请求的流量</td>
</tr>
</tbody></table>
<h3 id="请求头过滤器"><a href="#请求头过滤器" class="headerlink" title="请求头过滤器"></a>请求头过滤器</h3><p><strong>需求</strong>：给所有进入userservice的请求添加一个请求头：Truth&#x3D;bahuang is freaking awesome!</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span> </span><br><span class="line">        <span class="attr">filters:</span> <span class="comment"># 过滤器</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">bahuang</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> <span class="comment"># 添加请求头</span></span><br></pre></td></tr></table></figure></div>
<p>当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。</p>
<h3 id="默认过滤器"><a href="#默认过滤器" class="headerlink" title="默认过滤器"></a>默认过滤器</h3><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">bahuang</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> </span><br></pre></td></tr></table></figure></div>
<h3 id="3-4-4-总结"><a href="#3-4-4-总结" class="headerlink" title="3.4.4.总结"></a>3.4.4.总结</h3><p>过滤器的作用是什么？</p>
<p>① 对路由的请求或响应做加工处理，比如添加请求头</p>
<p>② 配置在路由下的过滤器只对当前路由的请求生效</p>
<p>③ defaultFilters的作用: 对所有路由都生效的过滤器</p>
<h2 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h2><h3 id="全局过滤器的作用"><a href="#全局过滤器的作用" class="headerlink" title="全局过滤器的作用"></a>全局过滤器的作用</h3><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p>
<p>定义方式是实现GlobalFilter接口。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  处理当前请求，有必要的话通过&#123;<span class="doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain 用来把请求委托给下一个过滤器 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在filter中编写自定义逻辑，可以实现下列功能：</p>
<ul>
<li>登录状态判断</li>
<li>权限校验</li>
<li>请求限流等</li>
</ul>
<h3 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h3><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p>
<ul>
<li><p>参数中是否有authorization，</p>
</li>
<li><p>authorization参数值是否为admin</p>
</li>
</ul>
<p>如果同时满足则放行，否则拦截</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Order(-1)</span>  <span class="comment">//排序值， 越小优先权越大</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2.获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.校验</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(auth)) &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 拦截</span></span><br><span class="line">            <span class="comment">// 设置状态码 401</span></span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="comment">// 结束处理</span></span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>跨域：域名不一致就是跨域，主要包括：</p>
<ul>
<li><p>域名不同： <a class="link"   href="http://www.taobao.com/" >www.taobao.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 和 <a class="link"   href="http://www.taobao.org/" >www.taobao.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 和 <a class="link"   href="http://www.jd.com/" >www.jd.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 和 miaosha.jd.com</p>
</li>
<li><p>域名相同，端口不同：localhost:8080和localhost8081</p>
</li>
</ul>
<p>跨域问题：<strong>浏览器</strong>禁止请求的发起者与服务端发生跨域ajax请求，请求被<strong>浏览器</strong>拦截的问题</p>
<p>解决方案：CORS。    详解地址↓</p>
<a class="button  center large" href='https://www.ruanyifeng.com/blog/2016/04/cors.html' title='CORS详解'><i class='fa-solid fa-play-circle'></i> CORS详解</a>

<h3 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h3><p>在gateway服务的application.yml文件中，添加下面的配置：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 。。。</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求 </span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>redis秒杀业务（分布式锁）</title>
    <url>/2024/02/14/redis%E7%A7%92%E6%9D%80%E4%B8%9A%E5%8A%A1%EF%BC%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%89/</url>
    <content><![CDATA[<h1 id="优惠券秒杀"><a href="#优惠券秒杀" class="headerlink" title="优惠券秒杀"></a>优惠券秒杀</h1><h2 id="一-生成全局唯一ID"><a href="#一-生成全局唯一ID" class="headerlink" title="一. 生成全局唯一ID"></a>一. 生成全局唯一ID</h2><h3 id="由于唯一的商品就是优惠券，需要用户抢，我们需要给它设置一个唯一ID"><a href="#由于唯一的商品就是优惠券，需要用户抢，我们需要给它设置一个唯一ID" class="headerlink" title="由于唯一的商品就是优惠券，需要用户抢，我们需要给它设置一个唯一ID"></a>由于唯一的商品就是优惠券，需要用户抢，我们需要给它设置一个唯一ID</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_01.png"
                      alt="唯一id"
                ></p>
<h3 id="定义一个工具类为RedisIdWorker"><a href="#定义一个工具类为RedisIdWorker" class="headerlink" title="定义一个工具类为RedisIdWorker"></a>定义一个工具类为RedisIdWorker</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2024/1/1-00:00</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BEGIN_TIMESTAMP</span> <span class="operator">=</span> <span class="number">1704067200L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">(String keyPrefix)</span> &#123;</span><br><span class="line">        <span class="comment">//1.生成时间戳</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//东八区当前时间距离设定的开始时间间隔</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC) - BEGIN_TIMESTAMP;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.生成序列号</span></span><br><span class="line">        <span class="comment">//2.1获取当前日期，精确到天</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyyMMdd&quot;</span>));</span><br><span class="line">        <span class="comment">//2.2自增长</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;icr:&quot;</span> + keyPrefix + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.拼接并返回</span></span><br><span class="line">        <span class="keyword">return</span> timestamp &lt;&lt; COUNT_BITS | count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="实现秒杀下单"><a href="#实现秒杀下单" class="headerlink" title="实现秒杀下单"></a>实现秒杀下单</h2><h3 id="中间用乐观锁来解决超卖问题"><a href="#中间用乐观锁来解决超卖问题" class="headerlink" title="中间用乐观锁来解决超卖问题"></a>中间用乐观锁来解决超卖问题</h3><p>   <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_02.png"
                      alt="秒杀下单"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">//5.一人一单</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//5.1查询订单</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">    <span class="comment">//5.2判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//用户已经购买</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">            .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">//乐观锁   where id = ? and stock &gt; 0</span></span><br><span class="line">            .update();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!success) &#123;</span><br><span class="line">        <span class="comment">// 扣减失败</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7.创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">//7.1订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    <span class="comment">//7.2用户id</span></span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    <span class="comment">//7.3代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增订单</span></span><br><span class="line">    save(voucherOrder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.返回订单Id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="实现一人一单"><a href="#实现一人一单" class="headerlink" title="实现一人一单"></a>实现一人一单</h2><p>根据用户id和优惠券id查询订单，如果已经购买过，就不允许再次购买<br>使用用户id来加锁，保证多线程使用同一个userId来下单时，串行执行下单动作<br><strong>加锁的时候也要使用字符串常量池</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取用户Id</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line"><span class="comment">//toString方法底层也是new了一个数据，导致相同的字符串不能被锁住</span></span><br><span class="line"><span class="comment">//调用intern字符串常量池，保证相同的字符串能加锁</span></span><br><span class="line"><span class="keyword">synchronized</span> (userId.toString().intern()) &#123;</span><br><span class="line">    <span class="comment">//获取代理对象，保证事务正确生效（注意上面的createVoucherOrder被spring事务管理，事务需要获取代理对象）</span></span><br><span class="line">    <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p><strong>在Redis集群中，简单的<em>synchronized</em>将不起作用。因为会有多个JVM，而每个<em>synchronized</em>只能监视自己的JVM</strong><br><strong>解决：利用Redis中的setnx(<em>set not exist</em>)，使所有的JVM都能可见的锁监视器</strong></p>
<h3 id="定义一个工具类SimpleRedisLock"><a href="#定义一个工具类SimpleRedisLock" class="headerlink" title="定义一个工具类SimpleRedisLock"></a>定义一个工具类SimpleRedisLock</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁(利用setnx操作)</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//释放锁</span></span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="解决Redis分布式锁的误删问题"><a href="#解决Redis分布式锁的误删问题" class="headerlink" title="解决Redis分布式锁的误删问题"></a>解决Redis分布式锁的误删问题</h3><p>在第一个线程业务还没完成，但是线程一锁的TTL到期了，导致超时释放锁。这时线程二又进来重新获取锁，业务完成后主动释放锁，导致线程删除的是其他线程的锁</p>
<p>解决：在删除锁的时候判断锁是否是自己的<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_04.png"
                      alt="误删图"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_03.png"
                      alt="误删锁"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取线程标识</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">//获取锁中标识</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line">    <span class="comment">//判断标识是否一致</span></span><br><span class="line">    <span class="keyword">if</span>(threadId.equals(id)) &#123;</span><br><span class="line">        <span class="comment">//释放锁</span></span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="使用lua脚本解决命令原子性问题"><a href="#使用lua脚本解决命令原子性问题" class="headerlink" title="使用lua脚本解决命令原子性问题"></a>使用lua脚本解决命令原子性问题</h3><p><strong>在线程释放锁的时候如果出现阻塞（可能是JVM在OG回收），导致业务还未完成，锁又被超时释放了。将又出现上面误删锁的情况</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_05.png"
                      alt="lua原子性问题"
                ><br><strong>解决：使用lua脚本来保证多条命令执行时的原子性</strong></p>
<p><em>lua脚本</em> （在resource下新建unlock.lua文件）</p>
<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 这里的KEYS[1] 就是锁的key， 这里的ARGV[1] 就是当前线程标识</span></span><br><span class="line"><span class="comment">-- 获取锁中的标识， 判断是否与当前线程标识一致</span></span><br><span class="line"><span class="keyword">local</span> id = redis.call(<span class="string">&#x27;get&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span>(id == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 释放 del key</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></div>
<p><strong>API提示</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_06.png"
                      alt="误删锁"
                ></p>
<h4 id="改造SimpleRedisLock代码"><a href="#改造SimpleRedisLock代码" class="headerlink" title="改造SimpleRedisLock代码"></a>改造SimpleRedisLock代码</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">        UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>)); <span class="comment">//指定lua脚本的位置</span></span><br><span class="line">        UNLOCK_SCRIPT.setResultType(Long.class);  <span class="comment">//指定lua脚本返回的类型</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        stringRedisTemplate.execute(</span><br><span class="line">                UNLOCK_SCRIPT,</span><br><span class="line">                Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">                ID_PREFIX + Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Redisson实现可重入锁"><a href="#Redisson实现可重入锁" class="headerlink" title="Redisson实现可重入锁"></a>Redisson实现可重入锁</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.23</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="配置Redisson客户端"><a href="#配置Redisson客户端" class="headerlink" title="配置Redisson客户端"></a>配置Redisson客户端</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="comment">//这里添加单点地址，也可以用config.useClusterServers()，添加集群地址</span></span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.28.135:6379&quot;</span>).setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">//添加客户端</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="使用Redisson"><a href="#使用Redisson" class="headerlink" title="使用Redisson"></a>使用Redisson</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testRedisson</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//获取锁（可重入），指定锁的名称</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;anyLock&quot;</span>);</span><br><span class="line">    <span class="comment">//尝试获取锁， 参数分别是： 获取锁的最大等待时间（期间会重试）， 锁自动释放时间，时间单位</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">//判断锁是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(isLock)&#123;</span><br><span class="line">        <span class="comment">//成功</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取锁成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="Redisson可重入锁原理"><a href="#Redisson可重入锁原理" class="headerlink" title="Redisson可重入锁原理"></a>Redisson可重入锁原理</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_07.png"
                      alt="流程图"
                ></p>
<h4 id="获取锁的Lua脚本"><a href="#获取锁的Lua脚本" class="headerlink" title="获取锁的Lua脚本"></a>获取锁的Lua脚本</h4><div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]; <span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]; <span class="comment">-- 线程唯一标识</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>]; <span class="comment">--锁的自动释放时间</span></span><br><span class="line"><span class="comment">-- 判读是否存在</span></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;exists&#x27;</span>, key) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 不存在，获取锁</span></span><br><span class="line">    redis.call(<span class="string">&#x27;hset&#x27;</span>, key, threadId, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="comment">-- 设置有效期</span></span><br><span class="line">    redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--锁已经存在， 判断threadId是否是自己</span></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;hexists&#x27;</span>, key, threadId) == <span class="number">1</span>) <span class="keyword">then</span> </span><br><span class="line">    <span class="comment">-- 不存在，获取锁，重入次数加一</span></span><br><span class="line">    redis.call(<span class="string">&#x27;hincrby&#x27;</span>, key, threadId, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="comment">-- 设置有效期</span></span><br><span class="line">    redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">--代码到这，说明获取锁的不是自己，获取锁失败</span></span><br></pre></td></tr></table></figure></div>

<h4 id="释放锁的Lua脚本"><a href="#释放锁的Lua脚本" class="headerlink" title="释放锁的Lua脚本"></a>释放锁的Lua脚本</h4><div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]; <span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]; <span class="comment">-- 线程唯一标识</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>]; <span class="comment">--锁的自动释放时间</span></span><br><span class="line"><span class="comment">-- 判读当前锁是否还是被自己持有</span></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;hexists&#x27;</span>, key, threadId) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 如果已经不是自己</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 是自己的锁，则重入减一</span></span><br><span class="line"><span class="keyword">local</span> count = redis.call(<span class="string">&#x27;hincrby&#x27;</span>, key, threadId, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">-- 判断是否重入次数为零</span></span><br><span class="line"><span class="keyword">if</span>(count &gt; <span class="number">0</span>) <span class="keyword">then</span> </span><br><span class="line">    <span class="comment">--大于零说明不能释放锁，重置有效期然后返回</span></span><br><span class="line">    redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">-- 等于0说明可以释放锁</span></span><br><span class="line">    redis.call(<span class="string">&#x27;del&#x27;</span>, key);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Redisson分布式锁原理"><a href="#Redisson分布式锁原理" class="headerlink" title="Redisson分布式锁原理"></a>Redisson分布式锁原理</h3><ul>
<li><strong>可重入</strong>： 利用hash结构记录线程id和重入次数</li>
<li><strong>可重试</strong>： 利用信号量和PubSub功能实现等待，唤醒，过去锁失败的重试机制</li>
<li><strong>超时续约</strong>： 利用watchDog，每隔一段时间（releaseTime &#x2F; 3），重置超时时间<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_08.png"
                      alt="分布式锁"
                ><br><em>看门狗机制：当我们没有设置releaseTime时，看门狗会自动设置一个30s的超时时间，并且每过10s对锁进行续约，保证锁不会超时过期</em></li>
</ul>
<h3 id="Redisson-mutiLock原理"><a href="#Redisson-mutiLock原理" class="headerlink" title="Redisson mutiLock原理"></a>Redisson mutiLock原理</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_09.webp"
                      alt="mutiLock"
                ></p>
<p><strong>mutiLock源码</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">newLeaseTime</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">if</span> (leaseTime &gt; <span class="number">0L</span>) &#123;   <span class="comment">//判断是否传入leaseTime, 不传默认为-1</span></span><br><span class="line">        <span class="keyword">if</span> (waitTime &gt; <span class="number">0L</span>) &#123;    <span class="comment">//传了leaseTime，将leaseTime更新为waitTime的两倍，防止在等待时锁被释放</span></span><br><span class="line">            newLeaseTime = unit.toMillis(waitTime) * <span class="number">2L</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newLeaseTime = unit.toMillis(leaseTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">remainTime</span> <span class="operator">=</span> -<span class="number">1L</span>;  <span class="comment">//剩余时间</span></span><br><span class="line">    <span class="keyword">if</span> (waitTime &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">        remainTime = unit.toMillis(waitTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">lockWaitTime</span> <span class="operator">=</span> <span class="built_in">this</span>.calcLockWaitTime(remainTime);</span><br><span class="line">    <span class="type">int</span> <span class="variable">failedLocksLimit</span> <span class="operator">=</span> <span class="built_in">this</span>.failedLocksLimit();</span><br><span class="line">    List&lt;RLock&gt; acquiredLocks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(<span class="built_in">this</span>.locks.size());   <span class="comment">//获得锁的集合列表</span></span><br><span class="line">    ListIterator&lt;RLock&gt; iterator = <span class="built_in">this</span>.locks.listIterator();   <span class="comment">//连锁的迭代器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext()) &#123;     <span class="comment">//遍历连锁</span></span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> (RLock)iterator.next();</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> lockAcquired;</span><br><span class="line">        <span class="keyword">try</span> &#123;   <span class="comment">//尝试获取锁</span></span><br><span class="line">            <span class="keyword">if</span> (waitTime &lt;= <span class="number">0L</span> &amp;&amp; leaseTime &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                lockAcquired = lock.tryLock();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">awaitTime</span> <span class="operator">=</span> Math.min(lockWaitTime, remainTime);</span><br><span class="line">                lockAcquired = lock.tryLock(awaitTime, newLeaseTime, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RedisResponseTimeoutException var21) &#123;</span><br><span class="line">            <span class="built_in">this</span>.unlockInner(Arrays.asList(lock));</span><br><span class="line">            lockAcquired = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">            lockAcquired = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lockAcquired) &#123;     <span class="comment">//获取锁成功，加入锁集合</span></span><br><span class="line">            acquiredLocks.add(lock);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//锁的个数 - 已经获得锁的个数 == 失败锁的上限个数    failedLocksLimit() 为0</span></span><br><span class="line">            <span class="comment">//换言之，只有获取到了所有锁才能跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.locks.size() - acquiredLocks.size() == <span class="built_in">this</span>.failedLocksLimit()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (failedLocksLimit == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//否则，将之前已经获取的锁施放</span></span><br><span class="line">                <span class="built_in">this</span>.unlockInner(acquiredLocks);</span><br><span class="line">                <span class="keyword">if</span> (waitTime &lt;= <span class="number">0L</span>) &#123;   <span class="comment">//如果不重试，直接返回false</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果重试，清空已经获取的锁集合</span></span><br><span class="line">                failedLocksLimit = <span class="built_in">this</span>.failedLocksLimit();</span><br><span class="line">                acquiredLocks.clear();</span><br><span class="line">                <span class="comment">//指向锁迭代器的头部，下次重头获取锁</span></span><br><span class="line">                <span class="keyword">while</span>(iterator.hasPrevious()) &#123;</span><br><span class="line">                    iterator.previous();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --failedLocksLimit;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (remainTime &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">            remainTime -= System.currentTimeMillis() - time;</span><br><span class="line">            time = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span> (remainTime &lt;= <span class="number">0L</span>) &#123;     <span class="comment">//判断在获取锁后剩余有效期</span></span><br><span class="line">                <span class="built_in">this</span>.unlockInner(acquiredLocks);    <span class="comment">//如果没有剩余有效期， 释放之前获得的锁</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leaseTime &gt; <span class="number">0L</span>) &#123;   <span class="comment">//如果设置了释放时间   （没有设置锁的有效期会走看门狗，自动续约锁有效期）</span></span><br><span class="line">        acquiredLocks.stream().map((l) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> (RedissonBaseLock)l;</span><br><span class="line">        &#125;).map((l) -&gt; &#123;     <span class="comment">//对获取的每个锁重新设置释放时间，先获取的锁会先进行倒计时，后获取的锁会后倒计时，导致锁的有效期不一致</span></span><br><span class="line">            <span class="keyword">return</span> l.expireAsync(unit.toMillis(leaseTime), TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;).forEach((f) -&gt; &#123;</span><br><span class="line">            f.toCompletableFuture().join();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="Redis分布式锁总结"><a href="#Redis分布式锁总结" class="headerlink" title="Redis分布式锁总结"></a>Redis分布式锁总结</h3><h4 id="不可重入Redis分布式锁："><a href="#不可重入Redis分布式锁：" class="headerlink" title="不可重入Redis分布式锁："></a>不可重入Redis分布式锁：</h4><ul>
<li>原理： 利用setnx的互斥性，利用ex避免死锁，释放锁时判断线程标识</li>
<li>缺陷：不可重入，无法重试，锁超时失效</li>
</ul>
<h4 id="可重入的Redis分布式锁："><a href="#可重入的Redis分布式锁：" class="headerlink" title="可重入的Redis分布式锁："></a>可重入的Redis分布式锁：</h4><ul>
<li>原理：利用hash结构，记录线程标识和重入次数，利用watchDog延续锁时间，利用信号量控制锁重试等待</li>
<li>缺陷：redis宕机引起锁失效问题</li>
</ul>
<h4 id="Redisson的mutiLock"><a href="#Redisson的mutiLock" class="headerlink" title="Redisson的mutiLock"></a>Redisson的mutiLock</h4><ul>
<li>原理：多个独立的Redis节点，必须在所有节点都获取重入锁，才算获取锁成功</li>
<li>缺陷：运维成本高，实现复杂</li>
</ul>
<h2 id="Redis优化秒杀"><a href="#Redis优化秒杀" class="headerlink" title="Redis优化秒杀"></a>Redis优化秒杀</h2><ul>
<li>优化前：所有步骤都是串行执行，对数据库的操作会占用很长时间，效率很低，并发能力差</li>
<li>优化后：将查询库存，查询订单的操作放到Redis中，如果成功在异步开启线程对数据库进行写操作<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_10.png"
                      alt="秒杀优化"
                ></li>
</ul>
<p><strong>将订单信息和优惠券信息缓存在Redis中（选择合适的数据结构）</strong></p>
<ul>
<li>优惠券信息 Key：优惠券id， Value：库存数量stock                   <em>String</em></li>
<li>订单信息 Key：优惠券id， Value：[用户id…]                       <em>set</em></li>
<li>用Lua脚本保证业务流程执行的原子性<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_11.png"
                      alt="秒杀优化缓存"
                ></li>
</ul>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_12.png"
                      alt="秒杀优化需求"
                ></p>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>1 将优惠券信息保存到Redis中</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSeckillVoucher</span><span class="params">(Voucher voucher)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存优惠券</span></span><br><span class="line">    save(voucher);</span><br><span class="line">    <span class="comment">// 保存秒杀信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeckillVoucher</span>();</span><br><span class="line">    seckillVoucher.setVoucherId(voucher.getId());</span><br><span class="line">    seckillVoucher.setStock(voucher.getStock());</span><br><span class="line">    seckillVoucher.setBeginTime(voucher.getBeginTime());</span><br><span class="line">    seckillVoucher.setEndTime(voucher.getEndTime());</span><br><span class="line">    seckillVoucherService.save(seckillVoucher);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存秒杀库存到Redis中</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<p>2 Lua脚本编写</p>
<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.参数列表</span></span><br><span class="line"><span class="comment">-- 1.1.优惠券id</span></span><br><span class="line"><span class="keyword">local</span> voucherId = ARGV[<span class="number">1</span>];</span><br><span class="line"><span class="comment">-- 1.2.用户id</span></span><br><span class="line"><span class="keyword">local</span> userId = ARGV[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">--2.数据key</span></span><br><span class="line"><span class="comment">-- 2.1库存key</span></span><br><span class="line"><span class="keyword">local</span> stockKey = <span class="string">&#x27;seckill:stock:&#x27;</span> .. voucherId;</span><br><span class="line"><span class="comment">-- 2.2订单key</span></span><br><span class="line"><span class="keyword">local</span> orderKey = <span class="string">&#x27;seckill:order:&#x27;</span> .. voucherId;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.脚本业务</span></span><br><span class="line"><span class="comment">-- 3.1判断库存是否充足 get stockKey</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">     <span class="comment">-- 库存不足</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 3.2判断用户是否下单 SISMEMBER orderKey userId</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;sismember&#x27;</span>, orderKey, userId)) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 存在，说明重复下单</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 3.3扣库存      incrby stockKey -1</span></span><br><span class="line">redis.call(<span class="string">&#x27;incrby&#x27;</span>, stockKey, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">-- 3.4下单（保存用户） sadd orderKey userId</span></span><br><span class="line">redis.call(<span class="string">&#x27;sadd&#x27;</span>, orderKey, userId)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></div>

<p>3 修改代码，封装到阻塞队列</p>
<ul>
<li><p><em>指定lua脚本</em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; SECKILL_SCRIPT;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    SECKILL_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">    SECKILL_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;seckill.lua&quot;</span>)); <span class="comment">//指定lua脚本的位置</span></span><br><span class="line">    SECKILL_SCRIPT.setResultType(Long.class);    <span class="comment">//指定lua脚本返回的类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><em>阻塞队列 &amp;&amp; 线程池 &amp;&amp; 线程任务</em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//阻塞队列</span></span><br><span class="line"><span class="keyword">private</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"><span class="comment">//线程池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">SECKILL_ORDER_EXECUTOR</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">//线程任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//1.获取阻塞队列的中的订单信息</span></span><br><span class="line">                <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> orderTasks.take();</span><br><span class="line">                <span class="comment">//2.创建订单</span></span><br><span class="line">                handleVoucherOrder(voucherOrder);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;处理订单信息异常&quot;</span> + e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">    proxy.createVoucherOrder(voucherOrder);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">    <span class="comment">//5.一人一单</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> voucherOrder.getUserId();</span><br><span class="line">    <span class="comment">//5.1查询订单</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).count();</span><br><span class="line">    <span class="comment">//5.2判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//用户已经购买</span></span><br><span class="line">        log.error(<span class="string">&quot;用户已经购买&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId())</span><br><span class="line">            .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">//乐观锁   where id = ? and stock &gt; 0</span></span><br><span class="line">            .update();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!success) &#123;</span><br><span class="line">        <span class="comment">// 扣减失败</span></span><br><span class="line">        log.error(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7.创建订单</span></span><br><span class="line">    <span class="comment">//新增订单</span></span><br><span class="line">    save(voucherOrder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><em>在业务一启动就开始执行线程任务(利用PostConstruct注解，提交线程任务)</em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    SECKILL_ORDER_EXECUTOR.submit(<span class="keyword">new</span> <span class="title class_">VoucherOrderHandler</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><em>执行lua脚本并且封装到阻塞队列中</em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">//获取用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//1.执行lua脚本</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">            SECKILL_SCRIPT,</span><br><span class="line">            Collections.emptyList(),</span><br><span class="line">            voucherId.toString(), userId.toString()</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//2.判断结果是否为0</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> result.intValue();</span><br><span class="line">    <span class="keyword">if</span>(r != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//2.1， 不为0， 没有购买资格</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(r == <span class="number">1</span> ? <span class="string">&quot;库存不足&quot;</span> : <span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.2 为0， 可以购买, 把下单信息保存在阻塞队列</span></span><br><span class="line">    <span class="comment">//2.3创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">//2.4订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    <span class="comment">//2.5用户id</span></span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    <span class="comment">//2.6代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    <span class="comment">//放入阻塞队列</span></span><br><span class="line">    orderTasks.add(voucherOrder);</span><br><span class="line">    <span class="comment">//获取代理对象</span></span><br><span class="line">    proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="comment">//3.返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><em>整体秒杀业务</em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="keyword">implements</span> <span class="title class_">IVoucherOrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ISeckillVoucherService seckillVoucherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IVoucherOrderService proxy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">SECKILL_ORDER_EXECUTOR</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//阻塞队列</span></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        SECKILL_ORDER_EXECUTOR.submit(<span class="keyword">new</span> <span class="title class_">VoucherOrderHandler</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//1.获取阻塞队列的中的订单信息</span></span><br><span class="line">                    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> orderTasks.take();</span><br><span class="line">                    <span class="comment">//2.创建订单</span></span><br><span class="line">                    handleVoucherOrder(voucherOrder);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;处理订单信息异常&quot;</span> + e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">            proxy.createVoucherOrder(voucherOrder);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">        <span class="comment">//5.一人一单</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> voucherOrder.getUserId();</span><br><span class="line">        <span class="comment">//5.1查询订单</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).count();</span><br><span class="line">        <span class="comment">//5.2判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//用户已经购买</span></span><br><span class="line">            log.error(<span class="string">&quot;用户已经购买&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId())</span><br><span class="line">                .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">//乐观锁   where id = ? and stock &gt; 0</span></span><br><span class="line">                .update();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!success) &#123;</span><br><span class="line">            <span class="comment">// 扣减失败</span></span><br><span class="line">            log.error(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7.创建订单</span></span><br><span class="line">        <span class="comment">//新增订单</span></span><br><span class="line">        save(voucherOrder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//秒杀业务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="comment">//获取用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//1.执行lua脚本</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">                SECKILL_SCRIPT,</span><br><span class="line">                Collections.emptyList(),</span><br><span class="line">                voucherId.toString(), userId.toString()</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//2.判断结果是否为0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> result.intValue();</span><br><span class="line">        <span class="keyword">if</span>(r != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//2.1， 不为0， 没有购买资格</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(r == <span class="number">1</span> ? <span class="string">&quot;库存不足&quot;</span> : <span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.2 为0， 可以购买, 把下单信息保存在阻塞队列</span></span><br><span class="line">        <span class="comment">//2.3创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">//2.4订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">//2.5用户id</span></span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">//2.6代金券id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        <span class="comment">//放入阻塞队列</span></span><br><span class="line">        orderTasks.add(voucherOrder);</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">        <span class="comment">//3.返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="优化总结"><a href="#优化总结" class="headerlink" title="优化总结"></a>优化总结</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_13.png"
                      alt="优化总结"
                ></p>
<ul>
<li>内存限制：阻塞队列用的是JVM内存，在高并发情况下，可能会导致JVM内存溢出或者受内存限制导致存不进去订单</li>
<li>数据安全：JVM内存不能持久化数据，当服务器宕机会导致数据丢失</li>
</ul>
<h2 id="Redis消息队列实现秒杀"><a href="#Redis消息队列实现秒杀" class="headerlink" title="Redis消息队列实现秒杀"></a>Redis消息队列实现秒杀</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_14.png"
                      alt="消息队列"
                ></p>
<h3 id="基于List模拟消息队列"><a href="#基于List模拟消息队列" class="headerlink" title="基于List模拟消息队列"></a>基于List模拟消息队列</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_15.png"
                      alt="List"
                ></p>
<ul>
<li>优点：<ol>
<li>利用Redis存储，不受限与JVM内存上限</li>
<li>基于Redis的持久化机制，数据安全性有保证</li>
<li>可以满足消息有序性</li>
</ol>
</li>
<li>缺点：<ol>
<li>无法避免消息丢失</li>
<li>只支持单消费者</li>
</ol>
</li>
</ul>
<h3 id="基于PubSub的消息队列"><a href="#基于PubSub的消息队列" class="headerlink" title="基于PubSub的消息队列"></a>基于PubSub的消息队列</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_16.png"
                      alt="PubSub"
                ></p>
<ul>
<li>优点：<ol>
<li>采用发布订阅模型，支持多生产，多消费</li>
</ol>
</li>
<li>缺点：<ol>
<li>不支持数据持久化</li>
<li>无法避免消息丢失</li>
<li>消息堆积有上限，超出时数据丢失</li>
</ol>
</li>
</ul>
<h3 id="基于Stream的消息队列"><a href="#基于Stream的消息队列" class="headerlink" title="基于Stream的消息队列"></a>基于Stream的消息队列</h3><p><strong>发送消息</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_17.png"
                      alt="streamAdd"
                ></p>
<p><strong>读取消息</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_18.png"
                      alt="streamRead"
                ><br>Stream类型消息队列的XREAD命令特点：</p>
<ul>
<li>消息可回溯（消息被读后不消失， 保存在队列中）</li>
<li>一个消息可以被多个消费者读取</li>
<li>可以堵塞读取</li>
<li>有消息漏读的风险</li>
</ul>
<h3 id="基于Stream的消息队列-消费者组"><a href="#基于Stream的消息队列-消费者组" class="headerlink" title="基于Stream的消息队列-消费者组"></a>基于Stream的消息队列-消费者组</h3><p><strong>创建消费者组</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_19.png"
                      alt="streamCreateGroup"
                ><br><strong>从消费者组读取消息</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_20.png"
                      alt="streamReadGroup"
                ><br>Stream类型消息队列的XREADGROUP命令特点：</p>
<ul>
<li>消息可回溯（消息被读后不消失， 保存在队列中）</li>
<li>可以多消费者争抢消息，加快消费速度</li>
<li>可以堵塞读取</li>
<li>没有消息漏读的风险</li>
<li>有消息确认机制，保证消息至少被消费一次<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_21.png"
                      alt="compare"
                ></li>
</ul>
<h3 id="基于Stream实现异步下单"><a href="#基于Stream实现异步下单" class="headerlink" title="基于Stream实现异步下单"></a>基于Stream实现异步下单</h3><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ms_22.png"
                      alt="need"
                ></p>
<h4 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a>代码编写</h4><p><em>1. 创建消息队列</em></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">XGROUP CREATE STREAM stream.orders g1 0 MKSTREAM</span><br></pre></td></tr></table></figure></div>

<p><em>2. 修改lua脚本</em></p>
<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.参数列表</span></span><br><span class="line"><span class="comment">-- 1.1.优惠券id</span></span><br><span class="line"><span class="keyword">local</span> voucherId = ARGV[<span class="number">1</span>];</span><br><span class="line"><span class="comment">-- 1.2.用户id</span></span><br><span class="line"><span class="keyword">local</span> userId = ARGV[<span class="number">2</span>];</span><br><span class="line"><span class="comment">-- 1.3订单id</span></span><br><span class="line"><span class="keyword">local</span> orderId = ARGV[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">--2.数据key</span></span><br><span class="line"><span class="comment">-- 2.1库存key</span></span><br><span class="line"><span class="keyword">local</span> stockKey = <span class="string">&#x27;seckill:stock:&#x27;</span> .. voucherId;</span><br><span class="line"><span class="comment">-- 2.2订单key</span></span><br><span class="line"><span class="keyword">local</span> orderKey = <span class="string">&#x27;seckill:order:&#x27;</span> .. voucherId;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.脚本业务</span></span><br><span class="line"><span class="comment">-- 3.1判断库存是否充足 get stockKey</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">     <span class="comment">-- 库存不足</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 3.2判断用户是否下单 SISMEMBER orderKey userId</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;sismember&#x27;</span>, orderKey, userId)) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 存在，说明重复下单</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 3.3扣库存      incrby stockKey -1</span></span><br><span class="line">redis.call(<span class="string">&#x27;incrby&#x27;</span>, stockKey, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">-- 3.4下单（保存用户） sadd orderKey userId</span></span><br><span class="line">redis.call(<span class="string">&#x27;sadd&#x27;</span>, orderKey, userId)</span><br><span class="line"><span class="comment">-- 3.5发送消息到队列  xadd stream.orders * k1 v1 k2 v2</span></span><br><span class="line">redis.call(<span class="string">&quot;xadd&quot;</span>, <span class="string">&quot;stream.orders&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;userId&quot;</span>, userId, <span class="string">&quot;voucherId&quot;</span>, voucherId, <span class="string">&quot;id&quot;</span>, orderId)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></div>
<p><em>3. 修改业务代码，向消息队列中发消息</em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">//获取用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//获取订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    <span class="comment">//1.执行lua脚本</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">            SECKILL_SCRIPT,</span><br><span class="line">            Collections.emptyList(),</span><br><span class="line">            voucherId.toString(), userId.toString(), String.valueOf(orderId)</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//2.判断结果是否为0</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> result.intValue();</span><br><span class="line">    <span class="keyword">if</span>(r != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//2.1， 不为0， 没有购买资格</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(r == <span class="number">1</span> ? <span class="string">&quot;库存不足&quot;</span> : <span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取代理对象</span></span><br><span class="line">    proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="comment">//3.返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><em>4. 获取消息队列中的信息</em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;stream.orders&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//1.获取消息队列的中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 stream.orders &gt;</span></span><br><span class="line">                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                        Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                        StreamReadOptions.empty().count(<span class="number">1</span>).block(Duration.ofSeconds(<span class="number">2</span>)),</span><br><span class="line">                        StreamOffset.create(queueName, ReadOffset.lastConsumed())</span><br><span class="line">                );</span><br><span class="line">                <span class="comment">//2判断消息获取是否成功</span></span><br><span class="line">                <span class="keyword">if</span> (list == <span class="literal">null</span> || list.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">//2.1.如果获取失败，说明没有消息，继续下一次循环</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//2.2.获取成功，解析消息中的订单信息</span></span><br><span class="line">                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                Map&lt;Object, Object&gt; values = record.getValue();</span><br><span class="line">                <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(), <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//下单</span></span><br><span class="line">                handleVoucherOrder(voucherOrder);</span><br><span class="line">                <span class="comment">//3.ACK确认 SACK stream.orders g1 id</span></span><br><span class="line">                stringRedisTemplate.opsForStream().acknowledge(queueName, <span class="string">&quot;g1&quot;</span>, record.getId());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;处理订单信息异常&quot;</span> + e);</span><br><span class="line">                <span class="comment">//去pending-list中查找订单</span></span><br><span class="line">                handlePendingList();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handlePendingList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//1.获取pending-list队列的中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 stream.orders 0</span></span><br><span class="line">                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                        Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                        StreamReadOptions.empty().count(<span class="number">1</span>),</span><br><span class="line">                        StreamOffset.create(queueName, ReadOffset.from(<span class="string">&quot;0&quot;</span>))</span><br><span class="line">                );</span><br><span class="line">                <span class="comment">//2判断消息获取是否成功</span></span><br><span class="line">                <span class="keyword">if</span> (list == <span class="literal">null</span> || list.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">//2.1.如果获取失败，说明pending-list没有异常消息, break</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//2.2.获取成功，解析消息中的订单信息</span></span><br><span class="line">                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                Map&lt;Object, Object&gt; values = record.getValue();</span><br><span class="line">                <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(), <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//下单</span></span><br><span class="line">                handleVoucherOrder(voucherOrder);</span><br><span class="line">                <span class="comment">//3.ACK确认 SACK stream.orders g1 id</span></span><br><span class="line">                stringRedisTemplate.opsForStream().acknowledge(queueName, <span class="string">&quot;g1&quot;</span>, record.getId());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;处理订单信息异常&quot;</span> + e);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="达人探店"><a href="#达人探店" class="headerlink" title="达人探店"></a>达人探店</h1><h2 id="点赞功能"><a href="#点赞功能" class="headerlink" title="点赞功能"></a>点赞功能</h2><h3 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h3><ul>
<li>同一个用户只能点赞一次，再次点击则取消点赞</li>
<li>如果当前用户已经点赞，则点赞按钮高亮显示（前端已实现，判断字段Blog类的isLike属性）</li>
</ul>
<p>实现步骤：</p>
<ul>
<li>给Blog类中添加一个isLike字段，标示是否被当前用户点赞</li>
<li>修改点赞功能，利用Redis的set集合判断是否点赞过，未点赞过则点赞数+1，已点赞过则点赞数-1</li>
<li>修改根据id查询Blog的业务，判断当前登录用户是否点赞过，赋值给isLike字段</li>
<li>修改分页查询Blog业务，判断当前登录用户是否点赞过，赋值给isLike字段</li>
</ul>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p><em>1.在blog字段下添加字段</em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> Boolean isLike;</span><br></pre></td></tr></table></figure></div>
<p><em>2.修改代码</em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">       <span class="comment">// 1.获取登录用户</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">       <span class="comment">// 2.判断当前登录用户是否已经点赞</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + id;</span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">isMember</span> <span class="operator">=</span> stringRedisTemplate.opsForSet().isMember(key, userId.toString());</span><br><span class="line">       <span class="keyword">if</span>(BooleanUtil.isFalse(isMember))&#123;</span><br><span class="line">            <span class="comment">//3.如果未点赞，可以点赞</span></span><br><span class="line">           <span class="comment">//3.1 数据库点赞数+1</span></span><br><span class="line">           <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked + 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">           <span class="comment">//3.2 保存用户到Redis的set集合</span></span><br><span class="line">           <span class="keyword">if</span>(isSuccess)&#123;</span><br><span class="line">               stringRedisTemplate.opsForSet().add(key,userId.toString());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//4.如果已点赞，取消点赞</span></span><br><span class="line">           <span class="comment">//4.1 数据库点赞数-1</span></span><br><span class="line">           <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked - 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">           <span class="comment">//4.2 把用户从Redis的set集合移除</span></span><br><span class="line">           <span class="keyword">if</span>(isSuccess)&#123;</span><br><span class="line">               stringRedisTemplate.opsForSet().remove(key,userId.toString());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="点赞排行榜"><a href="#点赞排行榜" class="headerlink" title="点赞排行榜"></a>点赞排行榜</h2><h3 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h3><p>在探店笔记的详情页面，应该把给该笔记点赞的人显示出来，比如最早点赞的TOP5，形成点赞排行榜：</p>
<p>之前的点赞是放到set集合，但是set集合是不能排序的，所以这个时候，可以采用一个可以排序的set集合，就是sortedSet</p>
<h3 id="编写代码-1"><a href="#编写代码-1" class="headerlink" title="编写代码"></a>编写代码</h3><p><em>1.修改点赞博客代码</em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">     <span class="comment">// 1.获取登录用户</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">     <span class="comment">// 2.判断当前登录用户是否已经点赞</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + id;</span><br><span class="line">     <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());</span><br><span class="line">     <span class="keyword">if</span> (score == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 3.如果未点赞，可以点赞</span></span><br><span class="line">         <span class="comment">// 3.1.数据库点赞数 + 1</span></span><br><span class="line">         <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked + 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">         <span class="comment">// 3.2.保存用户到Redis的set集合  zadd key value score</span></span><br><span class="line">         <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">             stringRedisTemplate.opsForZSet().add(key, userId.toString(), System.currentTimeMillis());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 4.如果已点赞，取消点赞</span></span><br><span class="line">         <span class="comment">// 4.1.数据库点赞数 -1</span></span><br><span class="line">         <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked - 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">         <span class="comment">// 4.2.把用户从Redis的set集合移除</span></span><br><span class="line">         <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">             stringRedisTemplate.opsForZSet().remove(key, userId.toString());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> Result.ok();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">isBlogLiked</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">     <span class="comment">// 1.获取登录用户</span></span><br><span class="line">     <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">     <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 用户未登录，无需查询是否点赞</span></span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> user.getId();</span><br><span class="line">     <span class="comment">// 2.判断当前登录用户是否已经点赞</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;blog:liked:&quot;</span> + blog.getId();</span><br><span class="line">     <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());</span><br><span class="line">     blog.setIsLike(score != <span class="literal">null</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>
<p><em>2.编写获取博客列表代码</em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogLikes</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + id;</span><br><span class="line">    <span class="comment">// 1.查询top5的点赞用户 zrange key 0 4</span></span><br><span class="line">    Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(key, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (top5 == <span class="literal">null</span> || top5.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.解析出其中的用户id</span></span><br><span class="line">    List&lt;Long&gt; ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">    <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids);</span><br><span class="line">    <span class="comment">// 3.根据用户id查询用户 WHERE id IN ( 5 , 1 ) ORDER BY FIELD(id, 5, 1)</span></span><br><span class="line">    List&lt;UserDTO&gt; userDTOS = userService.query()</span><br><span class="line">            .in(<span class="string">&quot;id&quot;</span>, ids).last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="string">&quot;)&quot;</span>).list()</span><br><span class="line">            .stream()</span><br><span class="line">            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 4.返回</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(userDTOS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>




]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud-Nacos篇(注册中心)</title>
    <url>/2024/03/13/Spring-Cloud-Nacos%E7%AF%87-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h2 id="认识-Nacos"><a href="#认识-Nacos" class="headerlink" title="认识 Nacos"></a>认识 Nacos</h2><p><a class="link"   href="https://nacos.io/" >Nacos <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>是阿里巴巴的产品，现在是<a class="link"   href="https://spring.io/projects/spring-cloud" >SpringCloud <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中的一个组件。相比<a class="link"   href="https://github.com/Netflix/eureka" >Eureka <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>功能更加丰富，在国内受欢迎程度较高。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_01.png"
                      alt="nacos"
                ></p>
<h2 id="服务注册到-nacos"><a href="#服务注册到-nacos" class="headerlink" title="服务注册到 nacos"></a>服务注册到 nacos</h2><p>Nacos 是 SpringCloudAlibaba 的组件，而 SpringCloudAlibaba 也遵循 SpringCloud 中定义的服务注册、服务发现规范。因此使用 Nacos 和使用 Eureka 对于微服务来说，并没有太大区别。</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>在 cloud-demo 父工程的 pom 文件中的<code>&lt;dependencyManagement&gt;</code>中引入 SpringCloudAlibaba 的依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>然后在 user-service 和 order-service 中的 pom 文件中引入 nacos-discovery 依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="配置-nacos-地址"><a href="#配置-nacos-地址" class="headerlink" title="配置 nacos 地址"></a>配置 nacos 地址</h3><p>在 user-service 和 order-service 的 application.yml 中添加 nacos 地址：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure></div>

<h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>重启微服务后，登录 nacos 管理页面，可以看到微服务信息：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_02.png"
                      alt="nacos"
                ></p>
<h2 id="服务分级存储模型"><a href="#服务分级存储模型" class="headerlink" title="服务分级存储模型"></a>服务分级存储模型</h2><p>一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_03.png"
                      alt="cluster"
                ><br>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。</p>
<h3 id="给-user-service-配置集群"><a href="#给-user-service-配置集群" class="headerlink" title="给 user-service 配置集群"></a>给 user-service 配置集群</h3><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure></div>

<h3 id="同集群优先的负载均衡"><a href="#同集群优先的负载均衡" class="headerlink" title="同集群优先的负载均衡"></a>同集群优先的负载均衡</h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p>
<p>因此 Nacos 中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。<br>1）给 order-service 配置集群信息<br>修改 order-service 的 application.yml 文件，添加集群配置：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure></div>

<p>2）修改负载均衡规则<br>修改 order-service 的 application.yml 文件，修改负载均衡规则：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则</span></span><br></pre></td></tr></table></figure></div>

<h2 id="权重配置"><a href="#权重配置" class="headerlink" title="权重配置"></a>权重配置</h2><p>实际部署中会出现这样的场景：</p>
<p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。<br>在 nacos 控制台，找到 user-service 的实例列表，点击编辑，即可修改权重：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_04.png"
                      alt="loadBalance"
                ></p>
<h2 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h2><p>Nacos 提供了 namespace 来实现环境隔离功能。</p>
<ul>
<li>nacos 中可以有多个 namespace</li>
<li>namespace 下可以有 group、service 等</li>
<li>不同 namespace 之间相互隔离，例如不同 namespace 的服务互相不可见<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_05.png"
                      alt="namespace"
                ></li>
</ul>
<h3 id="创建-namespace"><a href="#创建-namespace" class="headerlink" title="创建 namespace"></a>创建 namespace</h3><p>默认情况下，所有 service、data、group 都在同一个 namespace，名为 public：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_06.png"
                      alt="namespace"
                ><br>我们可以点击页面新增按钮，添加一个 namespace：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_07.png"
                      alt="namespace"
                ><br>然后，填写表单：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_08.png"
                      alt="namespace"
                ><br>就能在页面看到一个新的 namespace：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_09.png"
                      alt="namespace"
                ></p>
<h3 id="给微服务配置-namespace"><a href="#给微服务配置-namespace" class="headerlink" title="给微服务配置 namespace"></a>给微服务配置 namespace</h3><p>给微服务配置 namespace 只能通过修改配置来实现。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="comment"># 命名空间，填ID</span></span><br></pre></td></tr></table></figure></div>

<h2 id="Nacos-与-Eureka-的区别"><a href="#Nacos-与-Eureka-的区别" class="headerlink" title="Nacos 与 Eureka 的区别"></a>Nacos 与 Eureka 的区别</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_10.png"
                      alt="namespace"
                ></p>
<ul>
<li><p>Nacos 与 eureka 的共同点</p>
<ul>
<li>都支持服务注册和服务拉取</li>
<li>都支持服务提供者心跳方式做健康检测</li>
</ul>
</li>
<li><p>Nacos 与 Eureka 的区别</p>
<ul>
<li>Nacos 支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li>
<li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li>
<li>Nacos 支持服务列表变更的消息推送模式，服务列表更新更及时</li>
<li>Nacos 集群默认采用 AP 方式，当集群中存在非临时实例时，采用 CP 模式；Eureka 采用 AP 方式</li>
</ul>
</li>
</ul>
<h2 id="Nacos-配置管理"><a href="#Nacos-配置管理" class="headerlink" title="Nacos 配置管理"></a>Nacos 配置管理</h2><h3 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h3><p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_11.png"
                      alt="config"
                ></p>
<h4 id="在-nacos-中添加配置文件"><a href="#在-nacos-中添加配置文件" class="headerlink" title="在 nacos 中添加配置文件"></a>在 nacos 中添加配置文件</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_12.png"
                      alt="config"
                ><br>然后在弹出的表单中，填写配置信息：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_13.png"
                      alt="config"
                ><br><em>注意：项目的核心配置，需要热更新的配置才有放到 nacos 管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。</em></p>
<h4 id="从微服务拉取配置"><a href="#从微服务拉取配置" class="headerlink" title="从微服务拉取配置"></a>从微服务拉取配置</h4><p>微服务要拉取 nacos 中管理的配置，并且与本地的 application.yml 配置合并，才能完成项目启动。</p>
<p>但如果尚未读取 application.yml，又如何得知 nacos 地址呢？</p>
<p>因此 spring 引入了一种新的配置文件：bootstrap.yaml 文件，会在 application.yml 之前被读取，流程如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_14.png"
                      alt="config"
                ><br>1）引入 nacos-config 依赖</p>
<p>首先，在 user-service 服务中，引入 nacos-config 的客户端依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos配置管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>2）添加 bootstrap.yaml</p>
<p>然后，在 user-service 中添加一个 bootstrap.yaml 文件，内容如下：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure></div>

<p>本例中，就是去读取<code>userservice-dev.yaml</code>：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_15.png"
                      alt="config"
                ><br>3）读取 nacos 配置</p>
<p>在 user-service 中的 UserController 中添加业务逻辑，读取 pattern.dateformat 配置：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_16.png"
                      alt="config"
                ><br>在页面访问，可以看到效果：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_17.png"
                      alt="config"
                ></p>
<h3 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h3><p>我们最终的目的，是修改 nacos 中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>。</p>
<p>要实现配置热更新，可以使用两种方式：</p>
<h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>在@Value 注入的变量所在类上添加注解@RefreshScope：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_18.png"
                      alt="hotUpdate"
                ></p>
<h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>使用@ConfigurationProperties 注解代替@Value 注解。</p>
<p>在 user-service 服务中，添加一个类，读取 patterrn.dateformat 属性：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在 UserController 中使用这个类代替@Value：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_19.png"
                      alt="hotUpdate"
                ></p>
<h3 id="配置共享"><a href="#配置共享" class="headerlink" title="配置共享"></a>配置共享</h3><p>其实微服务启动时，会去 nacos 读取多个配置文件，例如：</p>
<ul>
<li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p>
</li>
<li><p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p>
</li>
</ul>
<p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。</p>
<h4 id="添加一个环境共享配置"><a href="#添加一个环境共享配置" class="headerlink" title="添加一个环境共享配置"></a>添加一个环境共享配置</h4><p>我们在 nacos 中添加一个 userservice.yaml 文件：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_20.png"
                      alt="sharedEnv"
                ></p>
<h4 id="在-user-service-中读取共享配置"><a href="#在-user-service-中读取共享配置" class="headerlink" title="在 user-service 中读取共享配置"></a>在 user-service 中读取共享配置</h4><p>在 user-service 服务中，修改 PatternProperties 类，读取新添加的属性：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_21.png"
                      alt="sharedEnv"
                ><br>在 user-service 服务中，修改 UserController，添加一个方法：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_22.png"
                      alt="sharedEnv"
                ></p>
<h4 id="运行两个-UserApplication，使用不同的-profile"><a href="#运行两个-UserApplication，使用不同的-profile" class="headerlink" title="运行两个 UserApplication，使用不同的 profile"></a>运行两个 UserApplication，使用不同的 profile</h4><p>修改 UserApplication2 这个启动项，改变其 profile 值：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_23.png"
                      alt="JVMENV"
                ><br>这样，UserApplication(8081)使用的 profile 是 dev，UserApplication2(8082)使用的 profile 是 test。</p>
<p>启动 UserApplication 和 UserApplication2<br>访问<a class="link"   href="http://localhost:8081/user/prop" >http://localhost:8081/user/prop <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，结果：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_24.png"
                      alt="JVMENV"
                ><br>访问<a class="link"   href="http://localhost:8082/user/prop" >http://localhost:8082/user/prop <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，结果：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_25.png"
                      alt="JVMENV"
                ><br>可以看出来，不管是 dev，还是 test 环境，都读取到了 envSharedValue 这个属性的值。</p>
<h4 id="配置共享的优先级"><a href="#配置共享的优先级" class="headerlink" title="配置共享的优先级"></a>配置共享的优先级</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/nacos_26.png"
                      alt="JVMENV"
                ></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习(leetcode)</title>
    <url>/2024/04/02/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%EF%BC%88leetcode%EF%BC%89/</url>
    <content><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><h3 id="LeetCode704-二分查找"><a href="#LeetCode704-二分查找" class="headerlink" title="LeetCode704.二分查找"></a><a class="link"   href="https://leetcode.cn/problems/binary-search/description/" >LeetCode704.二分查找 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/leetcode_01.png"
                     
                ></p>
<ul>
<li>二分查找，注意边界即可<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + ((right - left)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><h3 id="LeetCode27-移除元素"><a href="#LeetCode27-移除元素" class="headerlink" title="LeetCode27.移除元素"></a><a class="link"   href="https://leetcode.cn/problems/remove-element/description/" >LeetCode27.移除元素 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/leetcode_02.png"
                     
                ></p>
<ul>
<li>本题要求<strong>原地</strong>删除元素，并且不用管超出新长度后面的元素。所谓<strong>原地删除</strong>就是用后面的数覆盖前面的数，那么这题就可以使用双指针：当快指针指到<strong>target</strong>的时候，那么快指针就跳过，继续遍历；否则将快指针所指的值赋值给慢指针。最后慢指针下标就是新数组的长度<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://code-thinking.cdn.bcebos.com/gifs/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95.gif"
                     
                ><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义左右指针</span></span><br><span class="line">        <span class="type">int</span> left, right = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//当右指针不越界就一直循环</span></span><br><span class="line">        <span class="keyword">while</span>(right &lt; nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="comment">//找到target， 跳过</span></span><br><span class="line">            <span class="keyword">if</span> (nums[right] == val) &#123;</span><br><span class="line">                right++;;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//否则赋值</span></span><br><span class="line">            nums[left++] = nums[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回长度</span></span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="LeetCode977-有序数组的平方"><a href="#LeetCode977-有序数组的平方" class="headerlink" title="LeetCode977.有序数组的平方"></a><a class="link"   href="https://leetcode.cn/problems/squares-of-a-sorted-array/description/" >LeetCode977.有序数组的平方 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/leetcode_03.png"
                     
                ></p>
<ul>
<li>这道题给出一个<code>非递减</code>的数组，希望我们返回一个<code>非递减的平方</code>数组，同时要求log(n)的时间复杂度,那么说明我们需要只遍历一遍数组.这时候可以使用双指针，从数组的左右两侧分别往中间遍历。因为这是<code>非递减</code>数组，所以将数组元素平方后，平方后较大数只会出现在数组两侧。只需要左右指针往中间遍历过程中比较较大数，然后把较大数从后往前放入<code>目标数组</code>即可。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://code-thinking.cdn.bcebos.com/gifs/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.gif"
                     
                ><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">result</span><span class="params">(size, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> index = size - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;   <span class="comment">//左指针</span></span><br><span class="line">        <span class="type">int</span> right = size - <span class="number">1</span>;   <span class="comment">//右指针</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="comment">//左右指针比较，将较大数从后往前放入result数组</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">pow</span>(nums[left], <span class="number">2</span>) &lt; <span class="built_in">pow</span>(nums[right], <span class="number">2</span>)) &#123;</span><br><span class="line">                result[index--] = <span class="built_in">pow</span>(nums[right], <span class="number">2</span>);</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                result[index--] = <span class="built_in">pow</span>(nums[left], <span class="number">2</span>);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><h3 id="LeetCode209-长度最小的子数组"><a href="#LeetCode209-长度最小的子数组" class="headerlink" title="LeetCode209.长度最小的子数组"></a><a class="link"   href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/" >LeetCode209.长度最小的子数组 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/leetcode_04.png"
                     
                ></p>
<ul>
<li>本题需要查找一个<code>总和</code>大于等于<code>target</code>的<code>最小子序列</code>。那么这题就可以使用滑动窗口，也是属于双指针的一种方法。让右指针往右探寻一个总和大于等于<code>target</code>的<code>子序列</code>。每当探寻到之后，将左指针依次往右移动，不断缩小左指针和右指针之间的<code>总和</code>，判断这个<code>总和</code>是否大于<code>target</code>：大于就<code>缩小窗口</code>(子序列长度)，左指针往右探寻最小<code>最小窗口</code>;小于就<code>扩大窗口</code>，右指针重复往右探寻<code>总和</code>大于<code>target</code>的<code>子序列</code>。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://code-thinking.cdn.bcebos.com/gifs/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif"
                     
                ><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> result = INT_MAX;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="comment">//右指针往右探寻总和大于target的子序列</span></span><br><span class="line">            sum += nums[right++];</span><br><span class="line">            <span class="comment">//左指针往右缩小窗口，寻找最小窗口</span></span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= target) &#123;</span><br><span class="line">                result = <span class="built_in">min</span>(result, right - left);</span><br><span class="line">                sum -= nums[left++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果result没有被赋值过，说明右指针一直往右探寻到数组末尾都没找到满足的子序列</span></span><br><span class="line">        <span class="keyword">return</span> result == INT_MAX ? <span class="number">0</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="区间判定"><a href="#区间判定" class="headerlink" title="区间判定"></a>区间判定</h2><h3 id="LeetCode59-螺旋矩阵-II"><a href="#LeetCode59-螺旋矩阵-II" class="headerlink" title="LeetCode59.螺旋矩阵 II"></a><a class="link"   href="https://leetcode.cn/problems/spiral-matrix-ii/description/" >LeetCode59.螺旋矩阵 II <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/leetcode_05.png"
                     
                ></p>
<ul>
<li>这道题写了不下三次了，每次我都写不出来，不知道如何下手，这次算基本搞清楚了。这题可以算是对<code>区间</code>的拆分，例如样例所示，当n&#x3D;3时，顺时针循环填充，最外圈有八个数。循环填充时，分为<code>上</code>、<code>右</code>、<code>下</code>、<code>左</code>，每次循环只填充两个数，将区间给拆分出来，<code>上</code>填充1、2; <code>右</code>填充3、4; <code>下</code>填充5、6; <code>左</code>填充7、8。这样就不会互相干扰了，并且每个指针循环结束后正好指向的是下一个循环的开始情况，不会存在越界情况。再往中间进一层也是同样的道理，不过需要判断到底有多少层，还有每次进一层的话，顺时针填充的<code>开始索引</code>和<code>结束索引</code>都要向内收缩一格。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220922102236.png"
                     
                ><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">result</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="comment">// loop表示有多少层</span></span><br><span class="line">        <span class="type">int</span> loop = n / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//每层遍历开始时的x ,y下标(左边界), 每进一层都要+1</span></span><br><span class="line">        <span class="type">int</span> x_start = <span class="number">0</span>, y_start = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//右边界需要收缩的量, 每进一层收缩的量都要+1</span></span><br><span class="line">        <span class="type">int</span> offset = <span class="number">1</span>; </span><br><span class="line">        <span class="comment">//顺时针填充的计数值</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//每层遍历的x ,y下标  遵循上、右、下、左</span></span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="keyword">while</span>(loop--) &#123;</span><br><span class="line">            x = x_start;</span><br><span class="line">            y = y_start;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//上的从左到右</span></span><br><span class="line">            <span class="keyword">for</span>(; y &lt; n - offset; y++)&#123;</span><br><span class="line">                result[x][y] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右的从上到下</span></span><br><span class="line">            <span class="keyword">for</span>(; x &lt; n - offset; x++) &#123;</span><br><span class="line">                result[x][y] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//下的从右到左</span></span><br><span class="line">            <span class="keyword">for</span>(; y &gt; y_start; y--) &#123;</span><br><span class="line">                result[x][y] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//左的从下到上</span></span><br><span class="line">            <span class="keyword">for</span>(; x &gt; x_start; x--) &#123;</span><br><span class="line">                result[x][y] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右边界收缩</span></span><br><span class="line">            offset++;</span><br><span class="line">            <span class="comment">//左边界收缩</span></span><br><span class="line">            x_start++;</span><br><span class="line">            y_start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果层次是奇数，需要额外处理中心数据</span></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>) &#123;</span><br><span class="line">            result[n / <span class="number">2</span>][n / <span class="number">2</span>] = count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="基础动规"><a href="#基础动规" class="headerlink" title="基础动规"></a>基础动规</h2><h3 id="LeetCode509-斐波那契数"><a href="#LeetCode509-斐波那契数" class="headerlink" title="LeetCode509.斐波那契数"></a><a class="link"   href="https://leetcode.cn/problems/fibonacci-number/description/" >LeetCode509.斐波那契数 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/leetcode_dp_01.png"
                     
                ></p>
<p><em>1.循环解法</em></p>
<ul>
<li>题目已经告诉递推公式为： F(n) &#x3D; F(n - 1) + F(n - 2)</li>
<li>现在只需要初始化数组的前两个元素，后面依次循环即可<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> dp[<span class="number">31</span>];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n;i++)&#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<em>2.递归解法</em></li>
<li>确定递归终点：当F(n)递归到0 or 1时，直接返回。因为F(0) &#x3D; 0, F(1) &#x3D; 1;<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fib</span>(n - <span class="number">1</span>) + <span class="built_in">fib</span>(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="LeetCode70-爬楼梯"><a href="#LeetCode70-爬楼梯" class="headerlink" title="LeetCode70.爬楼梯"></a><a class="link"   href="https://leetcode.cn/problems/climbing-stairs/description/" >LeetCode70.爬楼梯 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/leetcode_dp_02.png"
                     
                ></p>
<ul>
<li>本题和斐波那契数列一样，当前阶f(n)可以从前一阶f(n - 1)和前两阶f(n - 2)达到。定义一个dp数组，记录达到当前阶的方法数量，那么dp[n] &#x3D; dp[n - 1] + dp[n - 2]<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> dp[<span class="number">55</span>];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化dp，第一阶和第二阶分别是1和2，表示有一种方法到达第一阶和两种方法到达第二阶</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud-Ribbon篇(负载均衡)</title>
    <url>/2024/03/12/Spring-Cloud-Ribbon%E7%AF%87-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h2 id="负载均衡原理"><a href="#负载均衡原理" class="headerlink" title="负载均衡原理"></a>负载均衡原理</h2><p>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ribbon_01.png"
                      alt="ribbon_01"
                ></p>
<p><strong>那么我们发出的请求明明是<a class="link"   href="http://userservice/user/1%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8F%98%E6%88%90%E4%BA%86http://localhost:8081%E7%9A%84%E5%91%A2%EF%BC%9F" >http://userservice/user/1，怎么变成了http://localhost:8081的呢？ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<h2 id="源码跟踪"><a href="#源码跟踪" class="headerlink" title="源码跟踪"></a>源码跟踪</h2><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p>
<p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p>
<p>我们进行源码跟踪：</p>
<h3 id="LoadBalancerIntercepor"><a href="#LoadBalancerIntercepor" class="headerlink" title="LoadBalancerIntercepor"></a>LoadBalancerIntercepor</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ribbon_02.png"
                      alt="LoadBalancerIntercepor"
                ><br>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p>
<ul>
<li><code>request.getURI()</code>：获取请求uri，本例中就是 <a class="link"   href="http://user-service/user/8" >http://user-service/user/8 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><code>originalUri.getHost()</code>：获取uri路径的主机名，其实就是服务id，<code>user-service</code></li>
<li><code>this.loadBalancer.execute()</code>：处理服务id，和用户请求。<br>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</li>
</ul>
<h3 id="LoadBalancerClient"><a href="#LoadBalancerClient" class="headerlink" title="LoadBalancerClient"></a>LoadBalancerClient</h3><p>继续跟入execute方法：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ribbon_03.png"
                      alt="LoadBalancerClient"
                ><br>代码是这样的：</p>
<ul>
<li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li>
<li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务<br>放行后，再次访问并跟踪，发现获取的是8081：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ribbon_04.png"
                      alt="负载均衡"
                ></li>
</ul>
<h3 id="负载均衡策略IRule"><a href="#负载均衡策略IRule" class="headerlink" title="负载均衡策略IRule"></a>负载均衡策略IRule</h3><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法来做负载均衡:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ribbon_04.png"
                      alt="IRule"
                ><br>我们继续跟入：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ribbon_05.png"
                      alt="负载均衡"
                ><br>继续跟踪源码chooseServer方法，发现这么一段代码：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ribbon_06.png"
                      alt="chooseServer"
                ><br>我们看看这个rule是谁：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ribbon_07.png"
                      alt="DefaultRule"
                ><br>这里的rule默认值是一个<code>RoundRobinRule</code>，也就是轮询</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ribbon_08.png"
                      alt="DefaultRule"
                ></p>
<p>基本流程如下：</p>
<ul>
<li>拦截我们的RestTemplate请求<a class="link"   href="http://userservice/user/1" >http://userservice/user/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li>
<li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li>
<li>eureka返回列表，localhost:8081、localhost:8082</li>
<li>IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081</li>
<li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到<a class="link"   href="http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82" >http://localhost:8081/user/1，发起真实请求 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h2><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/ribbon_08.png"
                      alt="策略"
                ><br>不同规则含义如下：</p>
<table>
<thead>
<tr>
<th><strong>内置负载均衡规则类</strong></th>
<th><strong>规则描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>RoundRobinRule</td>
<td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td>
</tr>
<tr>
<td>AvailabilityFilteringRule</td>
<td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</td>
</tr>
<tr>
<td>WeightedResponseTimeRule</td>
<td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td>
</tr>
<tr>
<td><strong>ZoneAvoidanceRule</strong></td>
<td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td>
</tr>
<tr>
<td>BestAvailableRule</td>
<td>忽略那些短路的服务器，并选择并发数较低的服务器。</td>
</tr>
<tr>
<td>RandomRule</td>
<td>随机选择一个可用的服务器。</td>
</tr>
<tr>
<td>RetryRule</td>
<td>重试机制的选择逻辑</td>
</tr>
</tbody></table>
<h3 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h3><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p>
<ol>
<li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">userservice:</span> <span class="comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure></div>
<strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</li>
</ol>
<h2 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h2><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p>
<p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">userservice</span></span><br></pre></td></tr></table></figure></div>


















]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Ribbon</tag>
      </tags>
  </entry>
  <entry>
    <title>Java八股文</title>
    <url>/2024/05/16/Java%E5%85%AB%E8%82%A1%E6%96%87/</url>
    <content><![CDATA[<h1 id="Redis篇"><a href="#Redis篇" class="headerlink" title="Redis篇"></a>Redis篇</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>查询一个不存在的数据，mysql查询不到数据也不会写入到redis中，导致每次请求都会访问数据库</p>
<h3 id="解决方案一（缓存空数据）"><a href="#解决方案一（缓存空数据）" class="headerlink" title="解决方案一（缓存空数据）"></a>解决方案一（缓存空数据）</h3><p>如果查询的数据是空，那么把这个空数据也存入redis<br>优点：简单<br>缺点：消耗内存，可能会发生不一致的问题</p>
<h3 id="解决方案二（布隆过滤器）"><a href="#解决方案二（布隆过滤器）" class="headerlink" title="解决方案二（布隆过滤器）"></a>解决方案二（布隆过滤器）</h3><p>布隆过滤器底层使用bitmap(位图)作为数据结构，数据通过一系列的Hash扰动函数，计算出相应下标位置，将计算位从0置为1。</p>
<p>查询数据的时候通过相同的Hash扰动函数获取hash值，判断相应位置是否都为1.</p>
<p>布隆过滤器存在一定的误判率，我们可以设置这个误判率。误判率越低，所需要的空间也就相应越大。</p>
<p>使用布隆过滤器时注意<code>缓存预热</code>，即将热点数据提前放置在布隆过滤器中</p>
<a class="button  center large" href='https://krisives.github.io/bloom-calculator' title='计算布隆过滤器占用大小的在线网站'><i class='fa-solid fa-play-circle'></i> 计算布隆过滤器占用大小的在线网站</a>

<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>当一个热点key过期的时候，正好有大量请求，这些大量请求会直接打到DB，那么这些高并发的请求可能会把DB给压垮</p>
<h3 id="解决方案一（互斥锁）"><a href="#解决方案一（互斥锁）" class="headerlink" title="解决方案一（互斥锁）"></a>解决方案一（互斥锁）</h3><p>当缓存失效时，先利用redis的setnx设置一个互斥锁，当获取锁成功后再去加载DB数据，获取锁失败的重试redis的get方法。<br>优点：强一致性<br>缺点：性能低</p>
<h3 id="解决方案二-（逻辑过期）"><a href="#解决方案二-（逻辑过期）" class="headerlink" title="解决方案二 （逻辑过期）"></a>解决方案二 （逻辑过期）</h3><p>给key设置一个expire逻辑过期字段，从redis中出去字段后判断是否过期，如果过期了则开通另一个线程去更新数据，当前线程直接返回旧数据。<br>优点：高可用，性能强<br>缺点：不能保证数据一致</p>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>大量key在同一时间失效导致大量请求并发打到数据库，或者redis服务器宕机</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li>给不同的key设置随机的TTL时间</li>
<li>利用redis集群提高服务的可用性 哨兵模式，集群模式</li>
<li>给缓存业务添加限流降级策略 nginx&#x2F;spring cloud gateway</li>
<li>添加多级缓存</li>
</ul>
<h2 id="双写一致"><a href="#双写一致" class="headerlink" title="双写一致"></a>双写一致</h2><ol>
<li><p>采用延迟双删方案，先删除缓存，再更新数据库，过一段时间再删除缓存</p>
</li>
<li><p>采用读写锁方案，redisson有提供读写锁。在读操作允许多个线程同时访问，写操作只运行一个线程访问。</p>
</li>
<li><p>采用MQ中间件，可以异步进行操作</p>
</li>
</ol>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="RDB（Redis-Database-Backup-file）"><a href="#RDB（Redis-Database-Backup-file）" class="headerlink" title="RDB（Redis Database Backup file）"></a>RDB（Redis Database Backup file）</h3><p>redis数据备份文件，也叫redis数据快照。通过将redis内存的数据存储到磁盘中，当redis宕机时，可以通过RDB的快照文件恢复数据。</p>
<h3 id="AOP（Append-Only-File）"><a href="#AOP（Append-Only-File）" class="headerlink" title="AOP（Append Only File）"></a>AOP（Append Only File）</h3><p>追加文件策略。把redis执行的写操作命令存储到磁盘中，当redis宕机时可以通过这个文件重新执行一遍命令。</p>
<h2 id="数据过期策略"><a href="#数据过期策略" class="headerlink" title="数据过期策略"></a>数据过期策略</h2><h3 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h3><p>当访问key时，判断它是否过期。如果过期了就删除，反之返回key</p>
<h3 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h3><ul>
<li>SLOW模式是定时任务，执行频率默认为10hz，每次不超过25ms，以通过修改配置文件redis.conf 的 <strong>hz</strong> 选项来调整这个次数</li>
<li>FAST模式执行频率不固定，每次事件循环会尝试执行，但两次间隔不低于2ms，每次耗时不超过1ms</li>
</ul>
<p>Redis的过期删除策略：<strong>惰性删除 + 定期删除</strong>两种策略进行配合使用。</p>
<h2 id="数据淘汰策略"><a href="#数据淘汰策略" class="headerlink" title="数据淘汰策略"></a>数据淘汰策略</h2><p>noeviction： 不淘汰任何key，但是内存满时不允许写入新数据，默认就是这种策略。<br>volatile-ttl： 对设置了TTL的key，比较key的剩余TTL值，TTL越小越先被淘汰<br>allkeys-random：对全体key ，随机进行淘汰。<br>volatile-random：对设置了TTL的key ，随机进行淘汰。<br>allkeys-lru： 对全体key，基于LRU算法进行淘汰 （LRU：Least Recently Used）<br>volatile-lru： 对设置了TTL的key，基于LRU算法进行淘汰<br>allkeys-lfu： 对全体key，基于LFU算法进行淘汰  （LFU：Least Frequently Used）<br>volatile-lfu： 对设置了TTL的key，基于LFU算法进行淘汰</p>
]]></content>
      <tags>
        <tag>八股</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT登录</title>
    <url>/2024/07/10/JWT%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h2 id="什么是JWT？"><a href="#什么是JWT？" class="headerlink" title="什么是JWT？"></a>什么是JWT？</h2><p>JWT，全称是Json Web Token， 是JSON风格轻量级的授权和身份认证规范，可实现无状态、分布式的Web应用授权；官网：<a class="link"   href="https://jwt.io/" >https://jwt.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>后端利用JWT生成一个加密token，里面存有用户信息，在登录或者注册请求完成后将token返回给前端， 以后前端发送请求将在请求头中携带token，后端将从请求头中拿到token并解析判断是否有效</p>
<h2 id="依赖配置（jjwt）"><a href="#依赖配置（jjwt）" class="headerlink" title="依赖配置（jjwt）"></a>依赖配置（jjwt）</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果你使用的是 Java 9 或更高版本，还需要添加以下依赖来避免 javax.xml.bind.DatatypeConverter 问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>


<h2 id="JWT工具类"><a href="#JWT工具类" class="headerlink" title="JWT工具类"></a>JWT工具类</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: JwtUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Verson</span>: v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: nopop</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024-06-25 00:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.common.exception.ClientException;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.ExpiredJwtException;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.common.convention.errorcode.UserErrorCode.TOKEN_EXPIRE_ERROR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密钥，用于签名和解密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SIGNATURE</span> <span class="operator">=</span> <span class="string">&quot;bahuang&quot;</span>;</span><br><span class="line">    <span class="comment">// JWT 过期时间，单位为毫秒</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">EXPIRATION_TIME</span> <span class="operator">=</span> <span class="number">1800000</span>; <span class="comment">//30分钟</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 JWT</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateJwt</span><span class="params">(Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()))</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRATION_TIME))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, SIGNATURE)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析 JWT 并获取 Claims</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJwt</span><span class="params">(String jwt)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                    .setSigningKey(SIGNATURE)</span><br><span class="line">                    .parseClaimsJws(jwt)</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClientException</span>(<span class="string">&quot;登录失效&quot;</span>, TOKEN_EXPIRE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>如果对于密钥和超时时间想从配置文件中读取的话，可以将此类配置为Spring的Component， 只需要在类上加入@Component注解。然后利用@Value从配置文件中读取即可</p>
<h2 id="后端拦截器"><a href="#后端拦截器" class="headerlink" title="后端拦截器"></a>后端拦截器</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 登录拦截器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Verson</span>: v1.0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span>: the-wayee</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span>: 2024-06-24 23:29</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Component</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//放行OPTIONS请求</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;OPTIONS&quot;</span>.equals(method)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span>(token == <span class="literal">null</span>) &#123;</span><br><span class="line">           response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);  <span class="comment">//后端返回 401 状态码</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClientException</span>(<span class="string">&quot;缺少token信息&quot;</span>); <span class="comment">//此处的 ClientException 为自定义异常，用于全局捕获，正常使用可替换RuntimeException</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">Claims</span> <span class="variable">payLoad</span> <span class="operator">=</span> parseJwt(token);</span><br><span class="line">           <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> payLoad.get(<span class="string">&quot;username&quot;</span>, String.class); <span class="comment">//从token中解析出负载的信息，取决你在generateJwt时的负载</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">           response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClientException</span>(<span class="string">&quot;登录失效&quot;</span>, TOKEN_EXPIRE_ERROR);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="拦截器配置"><a href="#拦截器配置" class="headerlink" title="拦截器配置"></a>拦截器配置</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.common.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 添加登录拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Verson</span>: v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: nopop</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024-06-24 23:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginConfig</span>  <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoginInterceptor loginInterceptor;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(loginInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">//拦截路径</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/register&quot;</span>); <span class="comment">//放行路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="后端登录请求（service层）"><a href="#后端登录请求（service层）" class="headerlink" title="后端登录请求（service层）"></a>后端登录请求（service层）</h2><p>因为 controller 层只用来接受请求，业务逻辑放入service层中判断</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserLoginResponseDTO <span class="title function_">login</span><span class="params">(UserLoginRequestDTO user)</span> &#123;</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = Wrappers.lambdaQuery(User.class)</span><br><span class="line">            .eq(User::getUsername, user.getUsername())</span><br><span class="line">            .eq(User::getPassword, user.getPassword());</span><br><span class="line">    <span class="type">User</span> <span class="variable">userResult</span> <span class="operator">=</span> baseMapper.selectOne(queryWrapper); <span class="comment">//利用 mybatis-plus 进行查询</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(BeanUtil.isEmpty(userResult)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClientException</span>(<span class="string">&quot;登录失败&quot;</span>, LOGIN_ERROR); <span class="comment">//如果数据库查不到， 抛出自定义异常</span></span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, Object&gt; payLoad = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  <span class="comment">// payload 负载部分，可以存入用户信息</span></span><br><span class="line">    payLoad.put(<span class="string">&quot;username&quot;</span>,user.getUsername());</span><br><span class="line">    <span class="comment">//生成token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.generateJwt(payLoad); <span class="comment">//生成 token</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.toBean(userResult, UserLoginResponseDTO.class)</span><br><span class="line">            .setToken(token); <span class="comment">//返回前端 token</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>至此后端部分完成</p>
<h2 id="前端跨域"><a href="#前端跨域" class="headerlink" title="前端跨域"></a>前端跨域</h2><p>配置在前端项目目录 vite.config.js 文件中</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, <span class="variable constant_">URL</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">80</span>,   <span class="comment">//前端项目端口</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8081&#x27;</span>,    <span class="comment">//后端项目路径和端口</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 是否开启跨域</span></span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>), <span class="comment">//设置 api 代理，将路径中的api去掉</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h2 id="前端拦截器"><a href="#前端拦截器" class="headerlink" title="前端拦截器"></a>前端拦截器</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: axios</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Verson</span>: v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: nopop</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024-06-24 13:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;@/router/index.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装 axios 请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,  </span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,  <span class="comment">//超时时间</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前端请求拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>) || <span class="string">&#x27;&#123;&#125;&#x27;</span>) <span class="comment">//在浏览器缓存中获取 token </span></span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">Token</span> = user.<span class="property">token</span> <span class="comment">//在请求发出前将 token 放入请求头中</span></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前端响应拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">200</span>) &#123; <span class="comment">//后端自定义的成功 code 码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(response)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response)</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span> || error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">code</span> === -<span class="number">1</span>) &#123; <span class="comment">// -1 为后端自定义失败 code 码</span></span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="前端登录请求"><a href="#前端登录请求" class="headerlink" title="前端登录请求"></a>前端登录请求</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: login</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Verson</span>: v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: the-wayee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024-06-28 14:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = (<span class="params">user</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;user&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user)); <span class="comment">//表单请求</span></span><br><span class="line">    instance.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>, formData,</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="attr">headers</span>:&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;multipart/form-data&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>.<span class="property">data</span>)) <span class="comment">//后端返回数据 data 中为 token</span></span><br><span class="line">                <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    router.<span class="title function_">push</span>(<span class="string">&quot;/manage/home&quot;</span>) <span class="comment">//跳转到首页</span></span><br><span class="line">                &#125;, <span class="number">200</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>JWT登录完成</p>
]]></content>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2024/08/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="六大设计原则"><a href="#六大设计原则" class="headerlink" title="六大设计原则"></a>六大设计原则</h2><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>不同的类具备不同的职责，各司其职。做系统设计时，如果发现有一个类拥有了两种职责，那么就要问一个问题：可以将这个类分成两个类吗？如果真的有必要，那就分开，千万不要让一个类干的事情太多。</p>
<p><strong>总结</strong>：一个类只承担一个职责</p>
<h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>类、模块、函数，可以去扩展，但不要去修改。如果要修改代码，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。</p>
<p><strong>总结</strong>：对软件实体的改动，最好用扩展而非修改的方式。</p>
<h3 id="里氏替换原则（对开闭原则进行增强）"><a href="#里氏替换原则（对开闭原则进行增强）" class="headerlink" title="里氏替换原则（对开闭原则进行增强）"></a>里氏替换原则（对开闭原则进行增强）</h3><p>父类可被子类替换，但反之不一定成立。也就是说，代码中可以将父类全部替换为子类，程序不会出现异常，但反过来就不一定了。</p>
<p><strong>总结</strong>：在继承类是，务必重写（override）父类中所有的方法，尤其需要注意父类的protected方法（它们往往是让你重写的），子类尽量不要暴露自己的public方法供外界调用。</p>
<h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>一个类对于其他类知道的越少越好，就是说一个对象应当对其他对象有尽可能少的了解,只和朋友通信，不和陌生人说话。英文简写为: LOD。</p>
<p><strong>总结</strong>：一定要做到：低耦合、高内聚。</p>
<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>不要对外暴露没有实际意义的接口。也就是说，尽量保证接口的实用性</p>
<p><strong>总结</strong>：不要对外暴露没有实际意义的接口。</p>
<h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p>高层模块不应该依赖于底层模块，而应该依赖于抽象。抽象不应依赖于细节，细节应依赖于抽象。应该面向接口编程，不该面向实现类编程。面向实现类编程相当于就事论事，那是正向依赖；面向接口编程，相当于透过现象看本质，抓住事务的共性，那就是反向依赖，即依赖倒置。</p>
<p><strong>总结</strong>：面向接口编程，提取出事务的本质和共性。</p>
<h2 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h2><h3 id="工厂方法模式（Factory-Method）"><a href="#工厂方法模式（Factory-Method）" class="headerlink" title="工厂方法模式（Factory Method）"></a>工厂方法模式（Factory Method）</h3><a class="button  center large" href='https://refactoringguru.cn/design-patterns/factory-method' title='工厂方法模式'><i class='fa-solid fa-play-circle'></i> 工厂方法模式</a>

<p><strong>定义</strong>：在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型。将对象的实例化推迟到子类。</p>
<p><strong>定义一个接口（发奖接口）</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICommodity</span> &#123;</span><br><span class="line">       <span class="keyword">void</span> <span class="title function_">sendCommodity</span><span class="params">(String uId, String commodityId, String bizId, Map&lt;String, String&gt; extMap)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>实现接口一（发放优惠券）</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponCommodityService</span> <span class="keyword">implements</span> <span class="title class_">ICommodity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(CouponCommodityService.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">CouponService</span> <span class="variable">couponService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CouponService</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendCommodity</span><span class="params">(String uId, String commodityId, String bizId, Map&lt;String, String&gt; extMap)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CouponResult</span> <span class="variable">couponResult</span> <span class="operator">=</span> couponService.sendCoupon(uId, commodityId, bizId);</span><br><span class="line">        logger.info(<span class="string">&quot;请求参数[优惠券] =&gt; uId：&#123;&#125; commodityId：&#123;&#125; bizId：&#123;&#125; extMap：&#123;&#125;&quot;</span>, uId, commodityId, bizId, JSON.toJSON(extMap));</span><br><span class="line">        logger.info(<span class="string">&quot;测试结果[优惠券]：&#123;&#125;&quot;</span>, JSON.toJSON(couponResult));</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;0000&quot;</span>.equals(couponResult.getCode())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(couponResult.getInfo());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>实现接口二（发放商品）</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsCommodityService</span> <span class="keyword">implements</span> <span class="title class_">ICommodity</span> &#123;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(GoodsCommodityService.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">GoodsService</span> <span class="variable">goodsService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GoodsService</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendCommodity</span><span class="params">(String uId, String commodityId, String bizId, Map&lt;String, String&gt; extMap)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">DeliverReq</span> <span class="variable">deliverReq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeliverReq</span>();</span><br><span class="line">       deliverReq.setUserName(queryUserName(uId));</span><br><span class="line">       deliverReq.setUserPhone(queryUserPhoneNumber(uId));</span><br><span class="line">       deliverReq.setSku(commodityId);</span><br><span class="line">       deliverReq.setOrderId(bizId);</span><br><span class="line">       deliverReq.setConsigneeUserName(extMap.get(<span class="string">&quot;consigneeUserName&quot;</span>));</span><br><span class="line">      </span><br><span class="line">       deliverReq.setConsigneeUserPhone(extMap.get(<span class="string">&quot;consigneeUserPhone&quot;</span>));</span><br><span class="line">      </span><br><span class="line">       deliverReq.setConsigneeUserAddress(extMap.get(<span class="string">&quot;consigneeUserAddress&quot;</span>));</span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> goodsService.deliverGoods(deliverReq);</span><br><span class="line">       logger.info(<span class="string">&quot;请求参数[优惠券] =&gt; uId：&#123;&#125; commodityId：&#123;&#125; bizId：&#123;&#125; extMap：&#123;&#125;&quot;</span>, uId, commodityId, bizId, JSON.toJSON(extMap));</span><br><span class="line">       logger.info(<span class="string">&quot;测试结果[优惠券]：&#123;&#125;&quot;</span>, isSuccess);</span><br><span class="line">       <span class="keyword">if</span> (!isSuccess) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;实物商品发放失败&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> String <span class="title function_">queryUserName</span><span class="params">(String uId)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;花花&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> String <span class="title function_">queryUserPhoneNumber</span><span class="params">(String uId)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;15200101232&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>实现接口三（发放兑换卡）</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CardCommodityService</span> <span class="keyword">implements</span> <span class="title class_">ICommodity</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(CardCommodityService.class);</span><br><span class="line">   <span class="comment">// 模拟注⼊入</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">IQiYiCardService</span> <span class="variable">iQiYiCardService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IQiYiCardService</span>();</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendCommodity</span><span class="params">(String uId, String commodityId, String bizId, Map&lt;String, String&gt; extMap)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> queryUserMobile(uId);</span><br><span class="line">       iQiYiCardService.grantToken(mobile, bizId);</span><br><span class="line">       logger.info(<span class="string">&quot;请求参数[爱奇艺兑换卡] =&gt; uId：&#123;&#125; commodityId：&#123;&#125; bizId： &#123;&#125; extMap：&#123;&#125;&quot;</span>, uId, commodityId, bizId, JSON.toJSON(extMap));</span><br><span class="line">       logger.info(<span class="string">&quot;测试结果[爱奇艺兑换卡]：success&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> String <span class="title function_">queryUserMobile</span><span class="params">(String uId)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;15200101232&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>创建工厂</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreFactory</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> ICommodity <span class="title function_">getCommodityService</span><span class="params">(Integer commodityType)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> == commodityType) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">if</span> (<span class="number">1</span> == commodityType) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CouponCommodityService</span>();</span><br><span class="line">       <span class="keyword">if</span> (<span class="number">2</span> == commodityType) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GoodsCommodityService</span>();</span><br><span class="line">       <span class="keyword">if</span> (<span class="number">3</span> == commodityType) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CardCommodityService</span>();</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不不存在的商品服务类型&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p><strong>总结</strong>：<code>避免创建者与具体的产品逻辑耦合</code>、<code>满足单一职责，每一个业务逻辑实现都在所属自己的类中完成</code>、<code>满足开闭原则，无需更改使用调用方就可以在程序中引入新的产品类型。</code>。但这样也会带来一些问题，⽐如有⾮常多的奖品类型，那么实现的⼦类会极速扩张。因此也需要使用其他的模式进行优化，这些在后续的设计模式中会逐步涉及到。</p>
<h3 id="抽象方法工厂模式（Abstract-Factory）"><a href="#抽象方法工厂模式（Abstract-Factory）" class="headerlink" title="抽象方法工厂模式（Abstract Factory）"></a>抽象方法工厂模式（Abstract Factory）</h3><a class="button  center large" href='https://refactoringguru.cn/design-patterns/abstract-factory' title='抽象方法工厂模式'><i class='fa-solid fa-play-circle'></i> 抽象方法工厂模式</a>

<p><strong>定义</strong>：定义了一个接口用于创建相关或有依赖关系的对象族，而无需明确指定具体类。</p>
<p>抽象工厂模式建议为系列中的每件产品明确声明接口。然后，确保所有产品变体都继承这些接口。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/abstract_factory.png"
                      alt="抽象工厂"
                ></p>
<p><strong>定义适配接⼝</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheAdapter</span> &#123;</span><br><span class="line">    String <span class="title function_">get</span><span class="params">(<span class="keyword">final</span> String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">long</span> timeout, TimeUnit timeUnit)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String key)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>实现接口一（EGMCacheAdapter）</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EGMCacheAdapter</span> <span class="keyword">implements</span> <span class="title class_">ICacheAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EGM</span> <span class="variable">egm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EGM</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> egm.gain(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        egm.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">long</span> timeout, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        egm.setEx(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        egm.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<p><strong>实现接口二（IIRCacheAdapter）</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IIRCacheAdapter</span> <span class="keyword">implements</span> <span class="title class_">ICacheAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">IIR</span> <span class="variable">iir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IIR</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> iir.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        iir.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">long</span> timeout, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        iir.setExpire(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        iir.del(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>定义抽象⼯工程代理类（JDKProxyFactory）</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Class&lt;T&gt; cacheClazz, Class&lt;? extends ICacheAdapter&gt; cacheAdapter)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDKInvocationHandler</span>(cacheAdapter.newInstance());</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(classLoader, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;cacheClazz&#125;, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<p><strong>实现代理类（JDKInvocationHandler）</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICacheAdapter cacheAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JDKInvocationHandler</span><span class="params">(ICacheAdapter cacheAdapter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cacheAdapter = cacheAdapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">return</span> ICacheAdapter.class.getMethod(method.getName(), ClassLoaderUtils.getClazzByArgs(args)).invoke(cacheAdapter, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>编写测试类</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_CacheService</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">CacheService</span> <span class="variable">proxy_EGM</span> <span class="operator">=</span> JDKProxyFactory.getProxy(CacheService.class, EGMCacheAdapter.class);</span><br><span class="line">    proxy_EGM.set(<span class="string">&quot;user_name_01&quot;</span>, <span class="string">&quot;犬来の八荒&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">val01</span> <span class="operator">=</span> proxy_EGM.get(<span class="string">&quot;user_name_01&quot;</span>);</span><br><span class="line">    logger.info(<span class="string">&quot;缓存服务 EGM 测试，proxy_EGM.get 测试结果：&#123;&#125;&quot;</span>, val01);</span><br><span class="line"></span><br><span class="line">    <span class="type">CacheService</span> <span class="variable">proxy_IIR</span> <span class="operator">=</span> JDKProxyFactory.getProxy(CacheService.class, IIRCacheAdapter.class);</span><br><span class="line">    proxy_IIR.set(<span class="string">&quot;user_name_01&quot;</span>, <span class="string">&quot;犬来の八荒&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">val02</span> <span class="operator">=</span> proxy_IIR.get(<span class="string">&quot;user_name_01&quot;</span>);</span><br><span class="line">    logger.info(<span class="string">&quot;缓存服务 IIR 测试，proxy_IIR.get 测试结果：&#123;&#125;&quot;</span>, val02);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>总结</strong>：抽象工厂模式解决的问题就是在一个产品族，存在多个不同类型的产品情况下，接口选择的问题。</p>
<h3 id="建造者模式（Builder）"><a href="#建造者模式（Builder）" class="headerlink" title="建造者模式（Builder）"></a>建造者模式（Builder）</h3><p><strong>定义</strong>：封装一个复杂对象构造过程，并允许按步骤构造。</p>
<a class="button  center large" href='https://refactoringguru.cn/design-patterns/builder' title='建造者模式'><i class='fa-solid fa-play-circle'></i> 建造者模式</a>

<p>生成器模式是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/builder.png"
                      alt="建造者"
                ></p>
<p><strong>定义装修包接口</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IMenu</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吊顶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IMenu <span class="title function_">appendCeiling</span><span class="params">(Matter matter)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 涂料</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IMenu <span class="title function_">appendCoat</span><span class="params">(Matter matter)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 地板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IMenu <span class="title function_">appendFloor</span><span class="params">(Matter matter)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 地砖</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IMenu <span class="title function_">appendTile</span><span class="params">(Matter matter)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 明细</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getDetail</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>装修包实现接口</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecorationPackageMenu</span> <span class="keyword">implements</span> <span class="title class_">IMenu</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Matter&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Matter&gt;();  <span class="comment">// 装修清单</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">BigDecimal</span> <span class="variable">price</span> <span class="operator">=</span> BigDecimal.ZERO;      <span class="comment">// 装修价格</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal area;  <span class="comment">// 面积</span></span><br><span class="line">    <span class="keyword">private</span> String grade;     <span class="comment">// 装修等级；豪华欧式、轻奢田园、现代简约</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DecorationPackageMenu</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DecorationPackageMenu</span><span class="params">(Double area, String grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.area = <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(area);</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IMenu <span class="title function_">appendCeiling</span><span class="params">(Matter matter)</span> &#123;</span><br><span class="line">        list.add(matter);</span><br><span class="line">        price = price.add(area.multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.2&quot;</span>)).multiply(matter.price()));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IMenu <span class="title function_">appendCoat</span><span class="params">(Matter matter)</span> &#123;</span><br><span class="line">        list.add(matter);</span><br><span class="line">        price = price.add(area.multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.4&quot;</span>)).multiply(matter.price()));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IMenu <span class="title function_">appendFloor</span><span class="params">(Matter matter)</span> &#123;</span><br><span class="line">        list.add(matter);</span><br><span class="line">        price = price.add(area.multiply(matter.price()));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IMenu <span class="title function_">appendTile</span><span class="params">(Matter matter)</span> &#123;</span><br><span class="line">        list.add(matter);</span><br><span class="line">        price = price.add(area.multiply(matter.price()));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDetail</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">detail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;\r\n-------------------------------------------------------\r\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;装修清单&quot;</span> + <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;套餐等级：&quot;</span> + grade + <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;套餐价格：&quot;</span> + price.setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP) + <span class="string">&quot; 元\r\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;房屋面积：&quot;</span> + area.doubleValue() + <span class="string">&quot; 平米\r\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;材料清单：\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Matter matter: list) &#123;</span><br><span class="line">            detail.append(matter.scene()).append(<span class="string">&quot;：&quot;</span>).append(matter.brand()).append(<span class="string">&quot;、&quot;</span>).append(matter.model()).append(<span class="string">&quot;、平米价格：&quot;</span>).append(matter.price()).append(<span class="string">&quot; 元。\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> detail.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>建造者方法</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IMenu <span class="title function_">levelOne</span><span class="params">(Double area)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DecorationPackageMenu</span>(area, <span class="string">&quot;豪华欧式&quot;</span>)</span><br><span class="line">                .appendCeiling(<span class="keyword">new</span> <span class="title class_">LevelTwoCeiling</span>())    <span class="comment">// 吊顶，二级顶</span></span><br><span class="line">                .appendCoat(<span class="keyword">new</span> <span class="title class_">DuluxCoat</span>())             <span class="comment">// 涂料，多乐士</span></span><br><span class="line">                .appendFloor(<span class="keyword">new</span> <span class="title class_">ShengXiangFloor</span>());     <span class="comment">// 地板，圣象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IMenu <span class="title function_">levelTwo</span><span class="params">(Double area)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DecorationPackageMenu</span>(area, <span class="string">&quot;轻奢田园&quot;</span>)</span><br><span class="line">                .appendCeiling(<span class="keyword">new</span> <span class="title class_">LevelTwoCeiling</span>())   <span class="comment">// 吊顶，二级顶</span></span><br><span class="line">                .appendCoat(<span class="keyword">new</span> <span class="title class_">LiBangCoat</span>())           <span class="comment">// 涂料，立邦</span></span><br><span class="line">                .appendTile(<span class="keyword">new</span> <span class="title class_">MarcoPoloTile</span>());       <span class="comment">// 地砖，马可波罗</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IMenu <span class="title function_">levelThree</span><span class="params">(Double area)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DecorationPackageMenu</span>(area, <span class="string">&quot;现代简约&quot;</span>)</span><br><span class="line">                .appendCeiling(<span class="keyword">new</span> <span class="title class_">LevelOneCeiling</span>())   <span class="comment">// 吊顶，一级顶</span></span><br><span class="line">                .appendCoat(<span class="keyword">new</span> <span class="title class_">LiBangCoat</span>())           <span class="comment">// 涂料，立邦</span></span><br><span class="line">                .appendTile(<span class="keyword">new</span> <span class="title class_">DongPengTile</span>());        <span class="comment">// 地砖，东鹏</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>测试</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_Builder</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Builder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 豪华欧式</span></span><br><span class="line">    System.out.println(builder.levelOne(<span class="number">132.52D</span>).getDetail());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 轻奢田园</span></span><br><span class="line">    System.out.println(builder.levelTwo(<span class="number">98.25D</span>).getDetail());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 现代简约</span></span><br><span class="line">    System.out.println(builder.levelThree(<span class="number">85.43D</span>).getDetail());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>总结</strong>：在一些基本物料不会变，而其组合经常变化的时候，就可以选择这样的设计模式</p>
<h3 id="原型模式（Prototype）"><a href="#原型模式（Prototype）" class="headerlink" title="原型模式（Prototype）"></a>原型模式（Prototype）</h3><a class="button  center large" href='https://refactoringguru.cn/design-patterns/prototype' title='原型模式'><i class='fa-solid fa-play-circle'></i> 原型模式</a>

<p><strong>定义</strong>：原型模式是一种创建型设计模式， 使你能够复制已有对象， 而又无需使代码依赖它们所属的类。</p>
<p><em><strong>基本结构</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/prototype.png"
                      alt="原型"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/clone.png"
                      alt="clone"
                ></p>
<p><strong>定义一个抽象类（实现Cloneable接口）</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(<span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">(Shape shape)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = shape.x;</span><br><span class="line">        <span class="built_in">this</span>.y = shape.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Shape) <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>实现类（Circle）</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(Circle circle)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(circle);</span><br><span class="line">        <span class="built_in">this</span>.radius = circle.radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">int</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">clone</span> <span class="operator">=</span> (Circle) <span class="built_in">super</span>.clone();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(clone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hashcode: &quot;</span> + <span class="built_in">this</span>.hashCode() + <span class="string">&quot; Circle&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;radius=&quot;</span> + radius +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>实现类（Rectangle）</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(Rectangle source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.width = source.width;</span><br><span class="line">        <span class="built_in">this</span>.height = source.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">int</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">int</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Rectangle <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">clone</span> <span class="operator">=</span> (Rectangle) <span class="built_in">super</span>.clone();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>(clone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hashcode: &quot;</span> + <span class="built_in">this</span>.hashCode() + <span class="string">&quot; Rectangle&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;width=&quot;</span> + width +</span><br><span class="line">                <span class="string">&quot;, height=&quot;</span> + height +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/imgs/prototype_clone.png"
                      alt="flow_pic"
                ></p>
<p><strong>测试类</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Shape&gt; shapes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        shapes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        circle.setRadius(<span class="number">10</span>);</span><br><span class="line">        circle.setX(<span class="number">1</span>);</span><br><span class="line">        circle.setY(<span class="number">2</span>);</span><br><span class="line">        shapes.add(circle);</span><br><span class="line"></span><br><span class="line">        <span class="type">Shape</span> <span class="variable">cloneCircle</span> <span class="operator">=</span> circle.clone();</span><br><span class="line">        shapes.add(cloneCircle);</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">rectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">        rectangle.setX(<span class="number">2</span>);</span><br><span class="line">        rectangle.setY(<span class="number">3</span>);</span><br><span class="line">        rectangle.setWidth(<span class="number">4</span>);</span><br><span class="line">        rectangle.setHeight(<span class="number">5</span>);</span><br><span class="line">        shapes.add(rectangle);</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">cloneRectangle</span> <span class="operator">=</span> rectangle.clone();</span><br><span class="line">        shapes.add(cloneRectangle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        List&lt;Shape&gt; shapeList = test.shapes;</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : shapeList) &#123;</span><br><span class="line">            System.out.println(shape);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
